<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java</title>
    <link href="/2022/06/03/Java/"/>
    <url>/2022/06/03/Java/</url>
    
    <content type="html"><![CDATA[<h1 id="0综述"><a href="#0综述" class="headerlink" title="0综述"></a>0综述</h1><p>1 课程资料<br>尚硅谷java教学<br><a href="https://www.bilibili.com/video/BV1Kb411W75N?p=19&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1Kb411W75N?p=19&amp;spm_id_from=pageDriver</a></p><p><img src="/img/java/0.png" alt="java知识体系"></p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">dir</span>      //列出当前目录下的文件以及文件夹<br><span class="hljs-built_in">md</span>       //创建目录<br><span class="hljs-built_in">rd</span>       //删除目录<br><span class="hljs-built_in">cd</span>       //进入指定目录<br><span class="hljs-built_in">cd</span>..     //退回上一级<br><span class="hljs-built_in">cd</span>\      //退回根目录<br><span class="hljs-built_in">del</span>      //删除文件<br><span class="hljs-keyword">exit</span>     //推出dos命令行<br>   <span class="hljs-built_in">echo</span> file_data_information&gt;<span class="hljs-number">1</span>.<span class="hljs-built_in">md</span>     //写入内容到指定文件<br></code></pre></td></tr></table></figure><h2 id="1java语言概述"><a href="#1java语言概述" class="headerlink" title="1java语言概述"></a>1java语言概述</h2><ul><li><p>1面向对象</p></li><li><ul><li>两个基本概念: 类，对象</li></ul></li><li><ul><li>三大特性: 封装，继承，多态</li></ul></li><li><p>2健壮性</p></li><li><ul><li>吸收了C/C++语言的优点,但去掉了其影响程序健壮性的部分,提供了一个相对安全的内存管理和访问机制</li></ul></li><li><p>3跨平台性</p></li><li><ul><li>跨平台性：通过Java语言编写的应用程序在不同的系统平台上都可以运行。</li></ul></li></ul><h2 id="2Java语言运行机制及运行过程"><a href="#2Java语言运行机制及运行过程" class="headerlink" title="2Java语言运行机制及运行过程"></a>2Java语言运行机制及运行过程</h2><ul><li><p>Java虚拟机<br>一次编译到处运行</p></li><li><p>垃圾自动回收<br>垃圾回收在Java程序运行过程中自动进行，程序员无法精确控制和干预</p></li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 单行注释</span><br><span class="hljs-comment">/* 多行注释 */</span><br><br><span class="hljs-comment">/**   文档注释   */</span>     可以被javadoc解析生成一套以网页文件形式体现的该程序的说明文档<br><br>javadoc -d mydoc -author -version HelloWorld.java<br></code></pre></td></tr></table></figure><ul><li>public 只能修饰同名的类</li></ul><h1 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h1><ul><li><p>菜鸟教程</p><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>1 分类 = 访问修饰符，非访问修饰符；修饰符用来定义类，方法或者变量，通常放在语句的最前端</p></li><li><p>访问控制修饰符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">default</span>  <br><span class="hljs-keyword">private</span>     在同一类内可见；使用对象：变量，方法<br><span class="hljs-keyword">public</span>      在所有类可见；使用对象：类，接口，变量，方法<br><span class="hljs-keyword">protected</span>   对同一包内的类和所有子类可见；使用对象：变量，方法。注意：不能修饰类<br></code></pre></td></tr></table></figure></li><li><p>非访问修饰符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span><br><span class="hljs-keyword">final</span><br><span class="hljs-keyword">abstract</span><br><span class="hljs-keyword">synchronized</span><br><span class="hljs-keyword">transient</span><br></code></pre></td></tr></table></figure></li><li><p>static修饰符<br>1静态变量：一个类实例化多少对象，它的静态变量只有一份拷贝。<br>2静态方法：静态方法不能使用非静态变量。静态方法从参数列表得到数据，然后计算这些数据</p></li><li><p>final修饰符<br>1 final变量一旦赋值后，不能被重新赋值。被final修饰的实例变量必须显式指定初始值；final修饰符和static修饰符一起使用创建类常量。<br>2 final方法可以被子类继承，但是不能被子类重写。</p></li><li><p>abstract修饰符<br>1 抽象方法是一种没有实现的方法；该方法的具体实现由子类提供<br>2 抽象方法不能声明为final和static<br>3 任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类<br>4 如果一个类包包含若干个抽象方法，那么该类必须被声明为抽象类。抽象类可以不包含抽象方法<br>5 抽象方法的声明以分号结尾</p></li><li><p>synchronized修饰符<br>synchronized 关键字声明的方法同一时间只能被一个线程访问。</p></li><li><p>transient修饰符<br>1 序列化的对象包含被transient修饰的实例变量时，java虚拟机跳过该特定的变量。<br>2 该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型</p></li></ul><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//while循环</span><br><span class="hljs-keyword">while</span>(布尔表达式)&#123;<br>   <span class="hljs-comment">//循环内容</span><br>&#125;<br><br><span class="hljs-keyword">do</span>&#123;<br>   <span class="hljs-comment">//代码语句</span><br>&#125;<span class="hljs-keyword">while</span>(布尔表达式)<br><br><span class="hljs-keyword">for</span>(初始化;布尔表达式;更新)&#123;<br>   <span class="hljs-comment">// 代码语句</span><br>&#125;<br><br><span class="hljs-comment">//java增强for循环</span><br><span class="hljs-keyword">for</span>(声明语句:表达式)&#123;<br>   <span class="hljs-comment">//代码句子</span><br>&#125;<br><br><span class="hljs-comment">//例子</span><br>        <span class="hljs-type">int</span> numbers[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> ite:numbers)&#123;<br>            System.out.println(ite);<br>        &#125;<br></code></pre></td></tr></table></figure><ul><li>break,continue</li></ul><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(confition)<br>&#123;  <span class="hljs-literal">true</span>==&gt;statement   &#125;<br><br><span class="hljs-keyword">if</span>(condition1)&#123;  true1=&gt;statement    &#125;<br><span class="hljs-keyword">else</span>&#123;<br>   <span class="hljs-literal">false</span> =&gt; statement2<br>&#125;<br><br><span class="hljs-keyword">if</span>()&#123;&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>&#123;&#125;<br><span class="hljs-keyword">else</span>&#123;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(expression)&#123;<br>   <span class="hljs-keyword">case</span> value:<br>      statement1;<br>      <span class="hljs-keyword">break</span>;<br>   <span class="hljs-keyword">case</span> value2:<br>      statement2;<br>      <span class="hljs-keyword">break</span>;<br>   <span class="hljs-keyword">default</span>:<br>      statement;<br>      <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Number-amp-Math类"><a href="#Number-amp-Math类" class="headerlink" title="Number&amp;Math类"></a>Number&amp;Math类</h3><ul><li><p>1Number<br>Java为每一个内置数据类型提供了对应的包装类。<br>所有的包装类（Integer、Long、Byte、Double、Float、Short）都是抽象类 Number 的子类。 </p></li><li><p>2Math<br>Java 的 Math 包含了用于执行基本数学运算的属性和方法，如初等指数、对数、平方根和三角函数。<br>Math 的方法都被定义为 static 形式，通过 Math 类可以在主函数中直接调用。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">xxxValue</span><span class="hljs-params">()</span></span><br>将 Number 对象转换为xxx数据类型的值并返回。<br><span class="hljs-function"><span class="hljs-title">equals</span><span class="hljs-params">()</span></span><br>判断number对象是否与参数相等。<br><span class="hljs-function"><span class="hljs-title">valueOf</span><span class="hljs-params">()</span></span><br>返回一个 Number 对象指定的内置数据类型<br><span class="hljs-function"><span class="hljs-title">toString</span><span class="hljs-params">()</span></span><br>以字符串形式返回值。<br><span class="hljs-function"><span class="hljs-title">parseInt</span><span class="hljs-params">()</span></span><br>将字符串解析为int类型。<br><span class="hljs-function"><span class="hljs-title">abs</span><span class="hljs-params">()</span></span><br>返回参数的绝对值。<br><span class="hljs-function"><span class="hljs-title">ceil</span><span class="hljs-params">()</span></span><br>返回大于等于( &gt;= )给定参数的的最小整数，类型为双精度浮点型。<br><span class="hljs-function"><span class="hljs-title">floor</span><span class="hljs-params">()</span></span><br>返回小于等于（&lt;=）给定参数的最大整数 。<br><span class="hljs-function"><span class="hljs-title">rint</span><span class="hljs-params">()</span></span><br>返回与参数最接近的整数。返回类型为double。<br><span class="hljs-function"><span class="hljs-title">round</span><span class="hljs-params">()</span></span><br>它表示四舍五入，算法为 Math<span class="hljs-selector-class">.floor</span>(x+<span class="hljs-number">0.5</span>)，即将原来的数字加上 <span class="hljs-number">0.5</span> 后再向下取整，所以，Math<span class="hljs-selector-class">.round</span>(<span class="hljs-number">11.5</span>) 的结果为<span class="hljs-number">12</span>，Math<span class="hljs-selector-class">.round</span>(-<span class="hljs-number">11.5</span>) 的结果为-<span class="hljs-number">11</span>。<br><span class="hljs-function"><span class="hljs-title">min</span><span class="hljs-params">()</span></span><br>返回两个参数中的最小值。<br><span class="hljs-function"><span class="hljs-title">max</span><span class="hljs-params">()</span></span><br>返回两个参数中的最大值。<br><span class="hljs-function"><span class="hljs-title">pow</span><span class="hljs-params">()</span></span><br>返回第一个参数的第二个参数次方。<br><span class="hljs-function"><span class="hljs-title">sqrt</span><span class="hljs-params">()</span></span><br>求参数的算术平方根。<br><span class="hljs-function"><span class="hljs-title">random</span><span class="hljs-params">()</span></span><br>返回一个随机数。<br></code></pre></td></tr></table></figure></li><li><p>字符串转Integer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;12345&quot;</span>;<br>   <span class="hljs-type">Integer</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> Integer.parseInt(str1);<br>   System.out.println(data);System.out.println(data.getClass());<br><br>   <span class="hljs-type">Integer</span> <span class="hljs-variable">data2</span> <span class="hljs-operator">=</span> Integer.valueOf(str1);<br>   System.out.println(data2);System.out.println(data2.getClass());<br><br>   <span class="hljs-type">Integer</span> <span class="hljs-variable">data3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(str1);<br>   System.out.println(data3);System.out.println(data3.getClass());<br><br><span class="hljs-comment">// 非法输入</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ab.12345&quot;</span>;     <span class="hljs-comment">//包含非数值型字符</span><br><br></code></pre></td></tr></table></figure></li><li><p>字符串转Double</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;12345.12&quot;</span>;<br>   <span class="hljs-type">Double</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> Double.parseDouble(str1);<br>   System.out.println(data);System.out.println(data.getClass());<br><br>   <span class="hljs-type">Double</span> <span class="hljs-variable">data2</span> <span class="hljs-operator">=</span> Double.valueOf(str1);<br>   System.out.println(data2);System.out.println(data2.getClass());<br><br>   <span class="hljs-type">Double</span> <span class="hljs-variable">data3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Double</span>(str1);<br>   System.out.println(data3);System.out.println(data3.getClass());<br><br><span class="hljs-comment">// 合法形参</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.12345&quot;</span>;       <span class="hljs-comment">//Double可包含.表示小数</span><br><br><span class="hljs-comment">// 非法形参</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ab.12345&quot;</span>;     <span class="hljs-comment">//包含非数值型字符</span><br></code></pre></td></tr></table></figure></li><li><p>数字转字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//直接转</span><br>   <span class="hljs-type">Integer</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">123</span>);<br>   <span class="hljs-type">String</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> data.toString();<br>   System.out.println(temp);<br></code></pre></td></tr></table></figure></li><li><p>数字型对象之间的转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用数字类型1.TypeValue()</span><br>   <span class="hljs-type">Integer</span> <span class="hljs-variable">in1</span> <span class="hljs-operator">=</span> <span class="hljs-number">123</span>;<br>   System.out.println(in1.doubleValue());<br></code></pre></td></tr></table></figure></li></ul><h3 id="Character-类"><a href="#Character-类" class="headerlink" title="Character 类"></a>Character 类</h3><p>Character 类用于对单个字符进行操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">isLetter()<br>是否是一个字母<br>isDigit()<br>是否是一个数字字符<br>isWhitespace()<br>是否是一个空白字符<br>isUpperCase()<br>是否是大写字母<br>isLowerCase()<br>是否是小写字母<br>toUpperCase()<br>指定字母的大写形式<br>toLowerCase()<br>指定字母的小写形式<br>toString()<br>返回字符的字符串形式，字符串的长度仅为<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>判断输入的字符串符合格式否<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1 判断全是数字否</span><br>   <span class="hljs-type">String</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123123131&quot;</span>;<br>   <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;temp.length();i++)&#123;<br>      <span class="hljs-keyword">if</span>(!Character.isDigit(temp.charAt(i)))&#123;<br>            flag = <span class="hljs-literal">false</span>;<br>      &#125;<br>   &#125;<br>   System.out.println(flag);<br><br><span class="hljs-comment">// 2 判断全是字符否 同理 isLetter()</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="String-类"><a href="#String-类" class="headerlink" title="String 类"></a>String 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1创建字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;string data&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;string data&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li><p>常用的字符串操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1连接字符串</span><br>   <span class="hljs-string">&quot;concating &quot;</span>.concat(<span class="hljs-string">&quot;string sequence&quot;</span>);<br>   <span class="hljs-string">&quot;concating&quot;</span>+<span class="hljs-string">&quot;string&quot;</span><br><br><span class="hljs-comment">// 2创建格式化字符串</span><br>   String fs;<br>   <span class="hljs-type">double</span> f1=<span class="hljs-number">3.14</span>;<br>   <span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>   <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sth&quot;</span>;<br>   fs = String.format(Locale.CHINA,<span class="hljs-string">&quot;string value&quot;</span>+<br>            <span class="hljs-string">&quot;浮点型变量的值为%f,&quot;</span>+<br>            <span class="hljs-string">&quot;整形变量的值为%d&quot;</span>+<br>            <span class="hljs-string">&quot;字符串变量的值为%s&quot;</span>,f1,i1,s1).;<br><br>   System.out.println(fs);<br></code></pre></td></tr></table></figure></li><li><p>String 方法</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-built_in">charAt</span>()    <span class="hljs-comment">// 返回指定索引处的char值</span><br>   <span class="hljs-type">char</span> result = <span class="hljs-string">&quot;1234567&quot;</span>.<span class="hljs-built_in">charAt</span>(<span class="hljs-number">6</span>);<br><br><span class="hljs-built_in">endsWith</span>(<span class="hljs-type">String</span> suffix)    <span class="hljs-comment">//测试此字符串是否以指定的后缀结尾</span><br>   <span class="hljs-type">boolean</span> result = <span class="hljs-string">&quot;123456&quot;</span>.<span class="hljs-built_in">endsWith</span>(<span class="hljs-string">&quot;456&quot;</span>);<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">hasCode</span><span class="hljs-params">()</span>     <span class="hljs-comment">//返回该字符串的hash码</span></span><br><span class="hljs-function">   <span class="hljs-type">int</span> result </span>= <span class="hljs-string">&quot;123456&quot;</span>.<span class="hljs-built_in">hashCode</span>();<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span>      <span class="hljs-comment">//返回字符串处理</span></span><br><span class="hljs-function">   <span class="hljs-type">int</span> result </span>= <span class="hljs-string">&quot;123&quot;</span>.<span class="hljs-built_in">length</span>();<br><br><span class="hljs-function"><span class="hljs-type">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(charSequence chars)</span>      <span class="hljs-comment">// 判断字符串包含指定字符序列否</span></span><br><span class="hljs-function">   <span class="hljs-type">boolean</span> result </span>= <span class="hljs-string">&quot;12345&quot;</span>.<span class="hljs-built_in">contains</span>(<span class="hljs-string">&quot;23&quot;</span>);<br><br><span class="hljs-function"><span class="hljs-type">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span></span><br><span class="hljs-function">   <span class="hljs-type">boolean</span> result </span>= <span class="hljs-string">&quot;1234&quot;</span>.<span class="hljs-built_in">isEmpty</span>();<br><br><span class="hljs-function"><span class="hljs-type">String</span> <span class="hljs-title">trim</span><span class="hljs-params">()</span>     <span class="hljs-comment">//去除首尾空格</span></span><br><span class="hljs-function">   <span class="hljs-type">String</span> result </span>= <span class="hljs-string">&quot;  123  45  &quot;</span>.<span class="hljs-built_in">trim</span>();<br></code></pre></td></tr></table></figure></li></ul><h3 id="StringBuffer和StringBuilder"><a href="#StringBuffer和StringBuilder" class="headerlink" title="StringBuffer和StringBuilder"></a>StringBuffer和StringBuilder</h3><ul><li><p>StringBuilder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-number">10</span>);<br>sb.append(<span class="hljs-string">&quot;Runoob..&quot;</span>);<br>System.out.println(sb);  <br>sb.append(<span class="hljs-string">&quot;!&quot;</span>);<br>System.out.println(sb); <br>sb.insert(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;Java&quot;</span>);<br>System.out.println(sb); <br>sb.delete(<span class="hljs-number">5</span>,<span class="hljs-number">8</span>);<br>System.out.println(sb);<br></code></pre></td></tr></table></figure><p><img src="/img/java/s1.png" alt="StringBuilder"></p></li><li><p>StringBuffer<br>应用程序要求线程安全的情况下，则必须使用 StringBuffer类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;菜鸟教程官网：&quot;</span>);<br>sBuffer.append(<span class="hljs-string">&quot;www&quot;</span>);<br>sBuffer.append(<span class="hljs-string">&quot;.runoob&quot;</span>);<br>sBuffer.append(<span class="hljs-string">&quot;.com&quot;</span>);<br>System.out.println(sBuffer);  <br></code></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;string infomation&quot;</span>);<br><span class="hljs-comment">// 将指定的字符串追加到此字符序列</span><br>sBuffer.append(<span class="hljs-string">&quot;appending string information&quot;</span>);<br><span class="hljs-comment">// 移除此序列的子字符串中的字符</span><br>sBuffer.delete(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>System.out.println(sBuffer);<br><span class="hljs-comment">// 将str参数的字符插入此序列中</span><br>sBuffer.insert(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;  insert string information&quot;</span>);<br>System.out.println(sBuffer);<br></code></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 声明数组</span><br>   dataType[] arrayRefVar;<br>   dataType arrayRefVar[];<br><br>   <span class="hljs-type">double</span>[] myList;<br>   <span class="hljs-type">double</span> mylist1[];<br><br><span class="hljs-comment">// 创建数组</span><br>   array1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">dataType</span>[arraySize];<br>   dataType[] array2 = &#123;value0,value1,value3...valuek&#125;;<br>   <br><br><span class="hljs-comment">//数组作为函数的返回值</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] reverse(<span class="hljs-type">int</span>[] list)&#123;<br>      <span class="hljs-type">int</span> []result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[list.length]<br>      <br><br>      <span class="hljs-keyword">return</span> result;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="日期时间"><a href="#日期时间" class="headerlink" title="日期时间"></a>日期时间</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取当前日期时间</span><br><span class="hljs-comment">// SimpleDateFormat  格式化日期</span><br>   <span class="hljs-type">Date</span> <span class="hljs-variable">date1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>   <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);<br>   System.out.println(ft.format(date1));<br><br><span class="hljs-comment">// 日期比较</span><br>   <span class="hljs-type">Date</span> <span class="hljs-variable">date1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">99</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>);<br>   <span class="hljs-type">Date</span> <span class="hljs-variable">date2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">99</span>,<span class="hljs-number">3</span>,<span class="hljs-number">12</span>);<br><br>   System.out.println(date1.before(date2));<br>   System.out.println(date1.after(date2));<br><br><span class="hljs-comment">// 测量时间</span><br>   <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1000</span>;i++)&#123;<br>      System.out.println(<span class="hljs-string">&quot;good job&quot;</span>);<br>   &#125;<br>   <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>   System.out.println(end - start);<br></code></pre></td></tr></table></figure><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>正则表达式定义了字符串的模式,用于搜索，编辑或处理文本</p><p>java.util.regex 包主要包括以下三个类：<br>    Pattern 类：<br>    pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。</p><pre><code class="hljs">Matcher 类：Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。PatternSyntaxException：PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;l am noob from the world some appending string value&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.*appending string.*&quot;</span>;<br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">isMatch</span> <span class="hljs-operator">=</span> Pattern.matches(pattern,content);<br>System.out.println(isMatch);<br></code></pre></td></tr></table></figure><h3 id="Java流-文件File和IO"><a href="#Java流-文件File和IO" class="headerlink" title="Java流,文件File和IO"></a>Java流,文件File和IO</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 从控制台读取字符输入</span><br>   <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(Ststem.in));<br>   <span class="hljs-type">char</span> ch;<br>   <span class="hljs-keyword">do</span>&#123;<br>      ch = (<span class="hljs-type">char</span>) br.read();<br>      System.out.println(ch);<br>   &#125;<span class="hljs-keyword">while</span>(ch != <span class="hljs-string">&#x27;q&#x27;</span>);<br><br><span class="hljs-comment">// 从控制台读取字符串输入</span><br>   <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>   String str;<br><br>   <span class="hljs-keyword">do</span>&#123;<br>      str = (String)br.readLine();<br>      System.out.println(str);<br>   &#125;<span class="hljs-keyword">while</span>(!str.equals(<span class="hljs-string">&quot;end&quot;</span>));<br></code></pre></td></tr></table></figure><p>！！！！！！！！！！文件</p><ul><li>读写文件<br><img src="/img/java/1.1.png" alt="java文件io流"></li></ul><p>输入流：数据从数据源到程序的路径<br>输出流：数据从程序到数据源的路径</p><ul><li>常用文件操作<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建文件对象以及获取相应的文件信息</span><br>   <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;./test.txt&quot;</span>);<br>   System.out.println(file.getName());<br>   System.out.println(file.getAbsoluteFile());<br>   System.out.println(file.getParent());<br>   System.out.println(file.length());<br>   System.out.println(file.isDirectory());<br><br><span class="hljs-comment">// 使用FileInputStream读取hello.txt</span><br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux基本命令</title>
    <link href="/2022/06/03/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/06/03/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2022/06/03/test/"/>
    <url>/2022/06/03/test/</url>
    
    <content type="html"><![CDATA[<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br></code></pre></td></tr></table></figure><div class="note note-success">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><p><img src="/img/example.gif"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>git笔记</title>
    <link href="/2022/06/03/git%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/06/03/git%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="0综述与安装"><a href="#0综述与安装" class="headerlink" title="0综述与安装"></a>0综述与安装</h1><a class="btn" href="https://juejin.cn/post/6844903877138087950%"  target="_blank">掘金git笔记</a><ul><li>安装: 一路next</li></ul><h1 id="git的常用命令"><a href="#git的常用命令" class="headerlink" title="git的常用命令"></a>git的常用命令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs git">git config --global user.name 用户名<br>git config --global user.email 邮箱<br><br><br><br>git init        初始化本地库<br><br>git status      查看本地库状态<br><br>git add 文件名  添加到暂存区<br><br>git commit -m &quot;注释信息&quot; 文件名     提交到本地库<br><br>git reflog      产看历史记录<br><br>git reset --hard 版本号<br></code></pre></td></tr></table></figure><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>在git bash</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk">git init<br><br><span class="hljs-regexp">//</span>创建新的文件<br>vim a.txt       <br>i<br><span class="hljs-regexp">//</span>输入文件内容<br>something <br><span class="hljs-regexp">//</span> esc + :wq<br><br><span class="hljs-regexp">//</span>查看git status状态<br>git status<br><br><span class="hljs-regexp">//</span> 添加暂存区<br>git add a.txt<br><br>git status<br><br><span class="hljs-regexp">//</span> 提交到本地仓库<br>git commit -m <span class="hljs-string">&quot;fist commit note &quot;</span><br><br><span class="hljs-regexp">//</span> 查看历史版本记录 reference logs<br>git reflog<br><br>git log<br></code></pre></td></tr></table></figure><h2 id="历史版本"><a href="#历史版本" class="headerlink" title="历史版本"></a>历史版本</h2><ul><li>查看历史版本信息和版本回溯<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">git reflog      // 查看版本信息<br>git log         // 查看版本详细信息<br></code></pre></td></tr></table></figure></li></ul><p>版本回溯demo</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-comment">// 修改两次文件 并提交</span><br>vim a.txt<br>i<br>========================version2================<br><span class="hljs-section">bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb</span><br><span class="hljs-section">==============================================</span><br>:wq<br><br>git add a.txt<br>git commit -m &quot;second commit &quot;<br><br>vim a.txt<br>i<br>===============version3===================<br><span class="hljs-section">cccccccccccccccccccccccccccccccccccccccccc</span><br><span class="hljs-section">==========================================</span><br>:wq<br>git add a.txt<br>git cmommit -m &quot;third commit&quot;<br><br><span class="hljs-comment">// 查看版本信息     并根据版本信息回溯</span><br>git reflog<br>git reset --hard 1975cf9        //--hard + 版本号<br>git reflog<br>cat a.txt       //查看文件信息<br></code></pre></td></tr></table></figure><h2 id="git分支"><a href="#git分支" class="headerlink" title="git分支"></a>git分支</h2><ul><li><p>分支操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs git">git branch 分支名           //创建分支<br>git branch -v             //查看分支<br>git checkout 分支名         //切换分支<br>git merge 分支名            // 把指定的分支合并到当前分支 <br></code></pre></td></tr></table></figure></li><li><p>创建分支，修改，合并</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs git">git branch hot-fix      //创建git分支<br>git checkout hot-fix    // 切换到hot-fix分支<br><br>// 对于当前的代码进行hot-fix<br>vim a.txt<br>i<br>===hot-fix===<br>hhhhhhhh<br>=============<br>esc :wq<br><br>// 切换到主分支 将修改的代码文件合并到主分支<br>git checkout master<br>git branch -v <br>git merge hot-fix<br>git add * <br>git commit -m &quot;test merge operation&quot;<br></code></pre></td></tr></table></figure></li><li><p>合并冲突：同一个文件的同一个位置有两套完全不同的修改</p></li><li><p>报错后通过手动合并解决这个问题</p></li></ul><h1 id="Git团队协作机制"><a href="#Git团队协作机制" class="headerlink" title="Git团队协作机制"></a>Git团队协作机制</h1><h2 id="创建别名"><a href="#创建别名" class="headerlink" title="创建别名"></a>创建别名</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">git remote -v   // 查看别名<br>git remote add ori git@github.com:lujie3/testgit.git    // git remote add 别名 仓库地址<br></code></pre></td></tr></table></figure><p>0 github创建仓库<br>1 本地仓库到远程仓库的提交</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> init <br><span class="hljs-symbol">touch</span> readme.txt<br><span class="hljs-symbol">git</span> <span class="hljs-keyword">add</span> readme.txt<br><span class="hljs-symbol">git</span> commit -m <span class="hljs-string">&quot;first commit &quot;</span><br><br><span class="hljs-symbol">git</span> remote -v<br><span class="hljs-symbol">git</span> remote <span class="hljs-keyword">add</span> nickname1 仓库地址<br><span class="hljs-symbol">git</span> remote -v<br><br><span class="hljs-symbol">git</span> <span class="hljs-keyword">push</span> nickname1 master   <span class="hljs-comment">// git push 仓库别名 仓库分支名</span><br></code></pre></td></tr></table></figure><h2 id="拉取远程库到本地库"><a href="#拉取远程库到本地库" class="headerlink" title="拉取远程库到本地库"></a>拉取远程库到本地库</h2><p>更新最新的远程库版本到本地仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git pull nickname1 master   // git pull 仓库别名 仓库分支名<br></code></pre></td></tr></table></figure><h2 id="clone仓库"><a href="#clone仓库" class="headerlink" title="clone仓库"></a>clone仓库</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">仓库地址</span><br></code></pre></td></tr></table></figure><p>git clone == git clone + git init + git remote nickname 仓库地址</p><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><p>github仓库setting&gt;Manage access 添加成员到团队中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs git">//成员1提交修改<br>git add modify.txt<br>git commit modify.txt -m &quot;commit notes&quot;<br>git remote push nickname master<br><br>// 成员2同步拉取最新版本<br>git pull nickname master<br>cat modify.txt      //查看修改结果<br></code></pre></td></tr></table></figure><h2 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h2><p>1 fork项目<br>2 Pull requests</p><h2 id="SSH免密登录"><a href="#SSH免密登录" class="headerlink" title="SSH免密登录"></a>SSH免密登录</h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C 邮箱<br></code></pre></td></tr></table></figure><p>生成的公钥添加到账户的ssh中</p><h1 id="idea-集成-git"><a href="#idea-集成-git" class="headerlink" title="idea 集成 git"></a>idea 集成 git</h1><h2 id="创建忽略文件"><a href="#创建忽略文件" class="headerlink" title="创建忽略文件"></a>创建忽略文件</h2><p>1 创建忽略规则文件      customed_name.ignore 比如git.ignore<br>2 在.gitconfig文件中引用忽略配置文件<br>3 idea&gt; setting中&gt; git</p><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>1 初始化 添加 提交<br>2 切换版本<br>3 创建分支</p><p class="note note-primary">标签</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs subunit">primary<br><br>secondary<br><br><span class="hljs-keyword">success</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword"></span>danger<br><br>warning<br><br>info<br><br>light<br></code></pre></td></tr></table></figure><div class="note note-success">            <p>文字 或者 <code>markdown</code> 均可</p>          </div>![](/img/example.gif)]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/03/hello-world/"/>
    <url>/2022/06/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>

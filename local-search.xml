<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>springboot</title>
    <link href="/2022/07/22/springboot/"/>
    <url>/2022/07/22/springboot/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring5-x-应用开发"><a href="#Spring5-x-应用开发" class="headerlink" title="Spring5.x 应用开发"></a>Spring5.x 应用开发</h1><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="声明Bean注解"><a href="#声明Bean注解" class="headerlink" title="声明Bean注解"></a>声明Bean注解</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Component</span><br><span class="hljs-variable">@Service</span><br><span class="hljs-variable">@Repository</span><br><span class="hljs-variable">@Controller</span><br></code></pre></td></tr></table></figure><h3 id="注入Bean注解"><a href="#注入Bean注解" class="headerlink" title="注入Bean注解"></a>注入Bean注解</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Autowired</span><br><span class="hljs-variable">@Resource</span><br><br><span class="hljs-variable">@Configuration</span><br><span class="hljs-variable">@ComponentScan</span><br><span class="hljs-variable">@Component</span><br><span class="hljs-variable">@Bean</span><br><span class="hljs-variable">@Value</span><br></code></pre></td></tr></table></figure><p>pom.xml == Bean对象 == 配置类对象 == 创建启动类</p><ul><li>@PropertySource加载配置文件<br><img src="/img/spring/new/1.1.12.png"></li></ul><h3 id="SpringBoot-入门"><a href="#SpringBoot-入门" class="headerlink" title="SpringBoot 入门"></a>SpringBoot 入门</h3><p><img src="/img/spring/new/1.2.1.png"></p><h1 id="SpringBoot-核心配置"><a href="#SpringBoot-核心配置" class="headerlink" title="SpringBoot 核心配置"></a>SpringBoot 核心配置</h1><p><img src="/img/spring/new/1.2.2.png"></p><ul><li>自定义静态目录<br><img src="/img/spring/new/1.2.3.png"></li></ul><h1 id="整合Mybatis"><a href="#整合Mybatis" class="headerlink" title="整合Mybatis"></a>整合Mybatis</h1><p><img src="/img/spring/new/1.2.4.png"></p><h1 id="整合分布式缓存Ehcache"><a href="#整合分布式缓存Ehcache" class="headerlink" title="整合分布式缓存Ehcache"></a>整合分布式缓存Ehcache</h1><p>SpringBoot默认集成了CacheManager , 为我们自动装配了多个CacheManager的实现</p><p>ehcache 是一个比较成熟的Java缓存框架,提供了用内存,磁盘文件存储,一级分布式存储方式等多种灵活的cache管理方案</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">pom.xml <span class="hljs-operator">=</span><span class="hljs-operator">=</span> ehcache.xml <span class="hljs-operator">=</span><span class="hljs-operator">=</span> application.yml <span class="hljs-operator">=</span><span class="hljs-operator">=</span> 启动缓存 <span class="hljs-operator">=</span><span class="hljs-operator">=</span> JavaBean序列化 <span class="hljs-operator">=</span><span class="hljs-operator">=</span> 缓存实现 <br></code></pre></td></tr></table></figure><ul><li><p>pom.xml<br><img src="/img/spring/new/1.2.6.png"></p></li><li><p>ehcahe.xml (主要是定义cache标签)<br><img src="/img/spring/new/1.2.7.png"></p></li><li><p>application.yml<br><img src="/img/spring/new/1.2.8.png"></p></li><li><p>启动缓存<br>在Starter启动入口类 添加@EnableCaching  激活缓存<br><img src="/img/spring/new/1.2.9.png"></p></li><li><p>JavaBean对象需要实现序列化 (implements Serializable)</p></li><li><p>缓存实现<br><img src="/img/spring/new/1.2.10.png"></p></li></ul><h1 id="SpringBoot-事务控制"><a href="#SpringBoot-事务控制" class="headerlink" title="SpringBoot 事务控制"></a>SpringBoot 事务控制</h1><h3 id="声明式事务配置"><a href="#声明式事务配置" class="headerlink" title="声明式事务配置"></a>声明式事务配置</h3><p>@Transactional 注释打在方法上<br><img src="/img/spring/new/1.3.1.png"></p><h3 id="xml的事务配置模板"><a href="#xml的事务配置模板" class="headerlink" title="xml的事务配置模板"></a>xml的事务配置模板</h3><p>以aop的形式xml的方式进行实现<br><img src="/img/spring/new/1.3.2.png"></p><h1 id="SpringBoot-数据校验-Validation"><a href="#SpringBoot-数据校验-Validation" class="headerlink" title="SpringBoot 数据校验 Validation"></a>SpringBoot 数据校验 Validation</h1><p>引入 spring-boot-starter-validation 依赖<br><img src="/img/spring/new/1.3.3.png"><br><img src="/img/spring/new/1.3.4.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>springMVC</title>
    <link href="/2022/07/22/springMVC/"/>
    <url>/2022/07/22/springMVC/</url>
    
    <content type="html"><![CDATA[<h1 id="MVC思想"><a href="#MVC思想" class="headerlink" title="MVC思想"></a>MVC思想</h1><p>模型-视图-控制器(MVC)是一个以设计界面应用程序为基础的设计思想。它主要通过分离模型,视图及控制器在应用中将业务逻辑从界面中解耦。</p><p>模型    ==  封装应用程序数据在视图层展示<br>视图    ==  展示数据<br>控制器  ==  接受来自用户的请求,并调用后台服务来处理业务逻辑</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Model:</span>  模型层(数据模型层+业务模型层)<br><br><span class="hljs-symbol">View:</span>   视图层(前端页面)<br><br><span class="hljs-symbol">Controller:</span> 控制器(协调页面请求 + 后台服务)<br>前端发送请求 == 请求到Controller == 调用service业务模型 == 调用dao数据模型 == 操纵数据库 == 返回数据到dao == service == controller == 视图解析器 == response响应返回页面<br></code></pre></td></tr></table></figure><h3 id="常见MVC框架"><a href="#常见MVC框架" class="headerlink" title="常见MVC框架"></a>常见MVC框架</h3><p>jsp+servlet &gt; structs2 &gt; springMVC</p><h1 id="SpringMVC框架概念与特点"><a href="#SpringMVC框架概念与特点" class="headerlink" title="SpringMVC框架概念与特点"></a>SpringMVC框架概念与特点</h1><h3 id="Spring-MVC-是什么"><a href="#Spring-MVC-是什么" class="headerlink" title="Spring MVC 是什么"></a>Spring MVC 是什么</h3><p>SpringMVC基于请求驱动(使用 请求-响应模型)。<br>SpringMVC 是 服务到工作者思想的实现。前端控制器是DispatcherServlet == 应用控制器拆为 处理器映射器(Handler Mapping)进行处理器管理和视图解析器(View Resolver)进行视图管理</p><h1 id="SpringMVC请求流程"><a href="#SpringMVC请求流程" class="headerlink" title="SpringMVC请求流程"></a>SpringMVC请求流程</h1><p><img src="/img/spring/new/1.1.8.png"></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">SpringMVC工作流程<br>    请求 -- 中央控制器DispatcherServlet -- 请求映射和请求适配(HandlerMapping和HandlerAdaper) <br>    == 请求到达controller == 返回 ModelAndView[数据+地址]<br>    == 视图解析器/视图渲染器<br>    == 响应页面<br><br><span class="hljs-symbol">HandlerMapping:</span> 请求映射<br><span class="hljs-symbol">HandlerAdaper:</span> 适配请求后缀<br></code></pre></td></tr></table></figure><h1 id="SpringMVC环境搭建"><a href="#SpringMVC环境搭建" class="headerlink" title="SpringMVC环境搭建"></a>SpringMVC环境搭建</h1><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">pom.xml <span class="hljs-operator">=</span><span class="hljs-operator">=</span> web.xml <span class="hljs-operator">=</span><span class="hljs-operator">=</span> springmvc.xml <span class="hljs-operator">=</span><span class="hljs-operator">=</span> 页面控制器的编写 <span class="hljs-operator">=</span><span class="hljs-operator">=</span> 视图页面 <span class="hljs-operator">=</span><span class="hljs-operator">=</span> 启动服务器<br></code></pre></td></tr></table></figure><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- spring web --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- spring mvc --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- web servlet --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 添加json 依赖jar包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.10.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.10.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-annotations<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.10.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 添加 commons-fileupload 依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="页面控制器"><a href="#页面控制器" class="headerlink" title="页面控制器"></a>页面控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span>&#123;<br><br><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>    mv.addobject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;hello spring mvc&quot;</span>);<br>    mv.setViewName(<span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-keyword">return</span> mv;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="添加视图页面"><a href="#添加视图页面" class="headerlink" title="添加视图页面"></a>添加视图页面</h3><h1 id="URL地址映射配置"><a href="#URL地址映射配置" class="headerlink" title="URL地址映射配置"></a>URL地址映射配置</h1><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h3><h4 id="映射单个URL"><a href="#映射单个URL" class="headerlink" title="映射单个URL"></a>映射单个URL</h4><p>@RequestMapping(“”)  或 @RequestMapping(value=””)</p><h4 id="映射多个URL"><a href="#映射多个URL" class="headerlink" title="映射多个URL"></a>映射多个URL</h4><p>@RequestMapping(“”,””) 或 @RequestMapping(value = {“”,””})</p><h4 id="映射URL在控制器上"><a href="#映射URL在控制器上" class="headerlink" title="映射URL在控制器上"></a>映射URL在控制器上</h4><p>注释在类上 则 作为根路径</p><h1 id="参数绑定"><a href="#参数绑定" class="headerlink" title="参数绑定"></a>参数绑定</h1><p>客户端请求的参数到控制器功能处理方法上的参数的绑定,对于参数绑定非常灵活<br>入参获取的绑定</p><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h1 id="请求转发与重定向"><a href="#请求转发与重定向" class="headerlink" title="请求转发与重定向"></a>请求转发与重定向</h1><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>重定向是发一个302的状态码给浏览器,浏览器自己去请求跳转的网页,地址栏会发送改变<br>重定向以 redirect: 开头</p><p><img src="/img/spring/new/1.1.9.png"></p><h3 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h3><p>请求转发,直接调用跳转的页面,让它返回。对于浏览器来说,它无法感觉服务器没有forward。<br>请求转发 以forward: 开头</p><p><img src="/img/spring/new/1.1.10.png"></p><h3 id="乱码解决"><a href="#乱码解决" class="headerlink" title="乱码解决"></a>乱码解决</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encode<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-</span> <span class="hljs-attr">class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encode<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="JSON数据开发"><a href="#JSON数据开发" class="headerlink" title="JSON数据开发"></a>JSON数据开发</h1><blockquote><p>@ResponseBody     @RequestBody</p></blockquote><h3 id="注解的使用"><a href="#注解的使用" class="headerlink" title="注解的使用"></a>注解的使用</h3><p>直接打在控制器的类上即可</p><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>SpringMVC的Interceptor拦截器。作用是拦截用户的请求并进行相应的处理。比如通过它来进行权限验证,或者是来判断用户是否登录等操作</p><ul><li>对于SpringMVC拦截器的定义方式有两种<br>1 实现接口      :org.springframework.web.servlet.HandlerInterceptor<br>2 继承适配器    :org.springframework.web.servlet.handler.HandlerInterceptorAdapter</li></ul><h3 id="拦截器实现"><a href="#拦截器实现" class="headerlink" title="拦截器实现"></a>拦截器实现</h3><ul><li>1 实现HandlerInterceptor接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**HandlerInterceptor接口中定义了三个方法，我们就是通过这三个方法来对用户的请求进行拦截处理的</span><br><span class="hljs-comment"> *  只有preHandle方法返回TRUE才会执行后续两个方法</span><br><span class="hljs-comment">*  */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span>&#123;<br><br><span class="hljs-comment">/**该方法将在整个请求结束之后执行,也就是在DispatcherServlet渲染了对应的视图之后执行</span><br><span class="hljs-comment">   *   这个方法的主要作用是用于进行资源清理工作的 </span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span><br><span class="hljs-keyword">throws</span> Exception &#123;<br>System.out.println(<span class="hljs-string">&quot;MyHandlerInterceptor afterCompletion()...被执行&quot;</span>);<br>&#125;<br><br><br><span class="hljs-comment">/**该方法将在请求处理之前进行调用</span><br><span class="hljs-comment">   *    返回值:true,表示调用后续的拦截器和Controller方法</span><br><span class="hljs-comment"> * false,表示请求结束,后续的Interceptor和Controller都不会再执行</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span><br><span class="hljs-keyword">throws</span> Exception &#123;<br>System.out.println(<span class="hljs-string">&quot;MyHandlerInterceptor preHandle()...被执行&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//表示调用后续的拦截器和Controller方法</span><br>&#125;<br><br><span class="hljs-comment">/**当前请求进行处理之后,也就是Controller方法调用之后执行</span><br><span class="hljs-comment">   * 但是他会在视图返回渲染之前被调用 </span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span><br><span class="hljs-params">ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>System.out.println(<span class="hljs-string">&quot;MyHandlerInterceptor postHandle()...被执行&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><img src="/img/spring/new/1.1.11.png"></p><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">pom.xml <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <br></code></pre></td></tr></table></figure><h3 id="pom-xml-1"><a href="#pom-xml-1" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 添加 commons-fileupload 依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="springmvc-xml"><a href="#springmvc-xml" class="headerlink" title="springmvc.xml"></a>springmvc.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 文件上传 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 编码方式 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;utf8&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 允许文件上传的最大尺寸 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxUploadSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;102400000&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 设置文件放入临时文件夹的最大大小限制。 此值是阈值，低于此值，则保存在内存中，如高于此值，则生成硬盘上的临时文件。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxInMemorySize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;40960&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mybatis</title>
    <link href="/2022/07/22/mybatis/"/>
    <url>/2022/07/22/mybatis/</url>
    
    <content type="html"><![CDATA[<h1 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h1><h2 id="xml的实现"><a href="#xml的实现" class="headerlink" title="xml的实现"></a>xml的实现</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">pom.<span class="hljs-keyword">xml</span> <span class="hljs-title">== mybatis-config</span>.<span class="hljs-keyword">xml</span> <span class="hljs-title">== mapper</span>.<span class="hljs-keyword">xml</span> <span class="hljs-title">== mybatis-config</span>.xml中添加mapper.<span class="hljs-keyword">xml</span> <span class="hljs-title">== </span><br></code></pre></td></tr></table></figure><h3 id="准备工作-pom-xml"><a href="#准备工作-pom-xml" class="headerlink" title="准备工作 pom.xml"></a>准备工作 pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Mybatis核心 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.18<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- log4j日志 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- lombok 依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置文件-mybatis-config-xml"><a href="#配置文件-mybatis-config-xml" class="headerlink" title="配置文件 mybatis-config.xml"></a>配置文件 mybatis-config.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 在xml文件中不能直接写 &amp; 字符，而需要写成 &amp;amp; 转义字符 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf8<span class="hljs-symbol">&amp;amp;</span>serverTimezone=GMT%2B8<span class="hljs-symbol">&amp;amp;</span>useSSL=false&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="userMapper-xml"><a href="#userMapper-xml" class="headerlink" title="userMapper.xml"></a>userMapper.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;bean.userMapper&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;bean.User&quot;</span>&gt;</span><br>select * from users where id=#&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="mybatis-config-xml添加mapper"><a href="#mybatis-config-xml添加mapper" class="headerlink" title="mybatis-config.xml添加mapper"></a>mybatis-config.xml添加mapper</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;bean/userMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;config.xml&quot;</span>; <br><span class="hljs-comment">//加载mybatis的配置文件（它也加载关联的映射文件）</span><br><span class="hljs-type">Reader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> Resources.getResourceAsReader(resource); <br><span class="hljs-comment">//构建sqlSession的工厂</span><br><span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(reader);<br><span class="hljs-comment">//创建能执行映射文件中sql的sqlSession</span><br><span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> sessionFactory.openSession();<br><span class="hljs-comment">//映射sql的标识字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;bean.userMapper.selectUser&quot;</span>;<br><span class="hljs-comment">//执行查询返回一个唯一user对象的sql</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> session.selectOne(statement, <span class="hljs-number">1</span>);<br>System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="注解的实现"><a href="#注解的实现" class="headerlink" title="注解的实现"></a>注解的实现</h2><h3 id="定义sql映射的接口"><a href="#定义sql映射的接口" class="headerlink" title="定义sql映射的接口"></a>定义sql映射的接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br><span class="hljs-meta">@Insert(&quot;insert into users(name, age) values(#&#123;name&#125;, #&#123;age&#125;)&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">(User user)</span>;<br><br><span class="hljs-meta">@Delete(&quot;delete from users where id=#&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">deleteUserById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br><br><span class="hljs-meta">@Update(&quot;update users set name=#&#123;name&#125;,age=#&#123;age&#125; where id=#&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(User user)</span>;<br><br><span class="hljs-meta">@Select(&quot;select * from users where id=#&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>;<br><br><span class="hljs-meta">@Select(&quot;select * from users&quot;)</span><br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getAllUser</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在config中注册这个映射接口"><a href="#在config中注册这个映射接口" class="headerlink" title="在config中注册这个映射接口"></a>在config中注册这个映射接口</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bean.UserMapper&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="级联查询"><a href="#级联查询" class="headerlink" title="级联查询"></a>级联查询</h2><h3 id="一对一关联"><a href="#一对一关联" class="headerlink" title="一对一关联"></a>一对一关联</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;resultMap type<span class="hljs-operator">=</span><span class="hljs-string">&quot;bean.one2one.Classes&quot;</span> id<span class="hljs-operator">=</span><span class="hljs-string">&quot;classResultMap&quot;</span>&gt;<br>&lt;id property<span class="hljs-operator">=</span><span class="hljs-string">&quot;id&quot;</span> column<span class="hljs-operator">=</span><span class="hljs-string">&quot;c_id&quot;</span>/&gt;<br>&lt;result property<span class="hljs-operator">=</span><span class="hljs-string">&quot;name&quot;</span> column<span class="hljs-operator">=</span><span class="hljs-string">&quot;c_name&quot;</span>/&gt;<br><br>    &lt;association property<span class="hljs-operator">=</span><span class="hljs-string">&quot;teacher&quot;</span> javaType<span class="hljs-operator">=</span><span class="hljs-string">&quot;bean.one2one.Teacher&quot;</span>&gt;<br>&lt;id property<span class="hljs-operator">=</span><span class="hljs-string">&quot;id&quot;</span> column<span class="hljs-operator">=</span><span class="hljs-string">&quot;t_id&quot;</span>/&gt;<br>&lt;result property<span class="hljs-operator">=</span><span class="hljs-string">&quot;name&quot;</span> column<span class="hljs-operator">=</span><span class="hljs-string">&quot;t_name&quot;</span>/&gt;<br>&lt;/association&gt;<br>&lt;/resultMap&gt;<br></code></pre></td></tr></table></figure><p><img src="/img/java/1.1.7.png"></p><h3 id="一对多关联"><a href="#一对多关联" class="headerlink" title="一对多关联"></a>一对多关联</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">使用嵌套结果映射来处理重复的联合结果的子集</span><br><span class="hljs-comment">SELECT * FROM class c, teacher t,student s WHERE c.teacher_id=t.t_id AND c.C_id=s.class_id AND  c.c_id=1</span><br><span class="hljs-comment"> --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getClass&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;classResultMap&quot;</span>&gt;</span><br>select * from class c, teacher t,student s where c.teacher_id=t.t_id and c.C_id=s.class_id and  c.c_id=#&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;bean.one2many.Classes&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;classResultMap&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;c_id&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;c_name&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;teacher_id&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;bean.one2many.Teacher&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;t_id&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;t_name&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-comment">&lt;!-- ofType指定students集合中的对象类型 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;bean.one2many.Student&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;s_id&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;s_name&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="动态SQL与模糊查询"><a href="#动态SQL与模糊查询" class="headerlink" title="动态SQL与模糊查询"></a>动态SQL与模糊查询</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span> <br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> </span><br><span class="hljs-meta"><span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;bean.userMapper&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;bean.ConditionUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;bean.User&quot;</span>&gt;</span><br>select * from d_user where age&gt;=#&#123;minAge&#125; and age<span class="hljs-symbol">&amp;lt;</span>=#&#123;maxAge&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&#x27;name!=&quot;%null%&quot;&#x27;</span>&gt;</span>and name like #&#123;name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Mybatis缓存"><a href="#Mybatis缓存" class="headerlink" title="Mybatis缓存"></a>Mybatis缓存</h2><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1.</span>一级缓存: 基于PerpetualCache 的 HashMap本地缓存，其存储作用域为 <span class="hljs-keyword">Session</span>，当 <span class="hljs-keyword">Session</span> flush 或 <span class="hljs-keyword">close</span> 之后，该<span class="hljs-keyword">Session</span>中的所有 <span class="hljs-keyword">Cache</span> 就将清空。<br><span class="hljs-number">2.</span> 二级缓存与一级缓存其机制相同，默认也是采用 PerpetualCache，HashMap存储，不同在于其存储作用域为 Mapper(Namespace)，并且可自定义存储源，如 Ehcache。<br><span class="hljs-number">3.</span> 对于缓存数据更新机制，当某一个作用域(一级缓存<span class="hljs-keyword">Session</span>/二级缓存Namespaces)的进行了 C/U/D 操作后，默认该作用域下所有 <span class="hljs-keyword">select</span> 中的缓存将被clear。<br></code></pre></td></tr></table></figure><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><p>1 添加一个<cache> 在userMapper.xml中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;bean.userMapper&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 开启二级缓存:namespace级别,作用域当前文件，默认缓存策略  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> </span><br><span class="hljs-tag"><span class="hljs-attr">eviction</span>=<span class="hljs-string">&quot;FIFO&quot;</span>  //回收策略为先进先出</span><br><span class="hljs-tag"><span class="hljs-attr">flushInterval</span>=<span class="hljs-string">&quot;60000&quot;</span> //自动刷新时间<span class="hljs-attr">60s</span></span><br><span class="hljs-tag"><span class="hljs-attr">size</span>=<span class="hljs-string">&quot;512&quot;</span> //最多缓存<span class="hljs-attr">512</span>个引用对象</span><br><span class="hljs-tag"><span class="hljs-attr">readOnly</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span> //只读<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 映射语句文件中的所有select语句将会被缓存。 <br><span class="hljs-bullet">2.</span> 映射语句文件中的所有insert，update和delete语句会刷新缓存。 <br><span class="hljs-bullet">3.</span> 缓存会使用Least Recently Used（LRU，最近最少使用的）算法来收回。 <br><span class="hljs-bullet">4.</span> 缓存会根据指定的时间间隔来刷新。 <br><span class="hljs-bullet">5.</span> 缓存会存储1024个对象<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>spring</title>
    <link href="/2022/07/21/spring/"/>
    <url>/2022/07/21/spring/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h1><h3 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h3><p class="note note-primary">IOC(控制反转),创建对象,管理对象,管理依赖关系</br>AOP(面向切面编程),对传统面向对象编程的补充</br>Templete,数据库模板类;数据库访问(JDBCTemplete)</br>事务管理: 基于注解的事务管理模式(声明式事务管理模式);基于xml配置文件的事务管理模式</br></p><h2 id="Spring框架-简介"><a href="#Spring框架-简介" class="headerlink" title="Spring框架 简介"></a>Spring框架 简介</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p class="note note-primary">javaEE应用一站式轻量级开源框架</br>核心是 IOC(控制反转/依赖注入) + AOP(面向切面)  两大技术 => 轻松解耦,提高开发效率</br></p><p><img src="/img/spring/new/1.1.png"></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tap">Spring IOC流程<br>   <span class="hljs-number"> 1 </span>pom.xml 引入依赖<br>   <span class="hljs-number"> 2 </span>创建 java类<br>   <span class="hljs-number"> 3 </span>创建 src/resource/spring.xml(spring的配置文件) 编写Bean对象 <br>   <span class="hljs-number"> 4 </span>测试类: 加载配置文件,获取实例化对象<br></code></pre></td></tr></table></figure><h2 id="Spring-IOC-配置文件-加载"><a href="#Spring-IOC-配置文件-加载" class="headerlink" title="Spring IOC 配置文件 加载"></a>Spring IOC 配置文件 加载</h2><h4 id="加载单个配置文件"><a href="#加载单个配置文件" class="headerlink" title="加载单个配置文件"></a>加载单个配置文件</h4><p><img src="/img/spring/new/1.1.2.png"></p><h4 id="加载多个配置文件1"><a href="#加载多个配置文件1" class="headerlink" title="加载多个配置文件1"></a>加载多个配置文件1</h4><ul><li>1 实例化ClassPathXmlApplicationContext对象时,指定多个文件<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;dao.xml&quot;</span>,<span class="hljs-string">&quot;service.xml&quot;</span>,<span class="hljs-string">&quot;pojo.xml&quot;</span>,<span class="hljs-string">&quot;vo.xml&quot;</span>);<br><span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService)context.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h4 id="加载多个配置文件2"><a href="#加载多个配置文件2" class="headerlink" title="加载多个配置文件2"></a>加载多个配置文件2</h4><ul><li>2 加载汇总的配置文件 spring.xml (通过引入需要的配置文件)<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--导入需要包含的资源文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;service.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;dao.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="Spring-IOC-容器-Bean对象实例化"><a href="#Spring-IOC-容器-Bean对象实例化" class="headerlink" title="Spring IOC 容器 Bean对象实例化"></a>Spring IOC 容器 Bean对象实例化</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">构造器实例化 <span class="hljs-operator">=</span><span class="hljs-operator">=</span> 静态工厂实例化 <span class="hljs-operator">=</span><span class="hljs-operator">=</span> 实例化工厂实例化<br></code></pre></td></tr></table></figure><p><img src="/img/spring/new/1.1.3.png"><br><img src="/img/spring/new/1.1.4.png"><br><img src="/img/spring/new/1.1.5.png"></p><ul><li>Spring 三种实例化Bean的方法比较<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart">构造方法<br>    通过bean的缺省构造函数创建;<br>静态<span class="hljs-keyword">factory</span><br>    可以统一管理各个bean的创建,如各个bean在创建之前需要相同的初始化处理,则可用这个<span class="hljs-keyword">factory</span>方法进行统一处理<br>实例化<span class="hljs-keyword">factory</span><br>    <span class="hljs-number">1</span> 继承了其他框架bean的创建方法 <span class="hljs-number">2</span> bean和<span class="hljs-keyword">factory</span>的角色互换<br></code></pre></td></tr></table></figure></li></ul><h2 id="Spring-IOC-注入"><a href="#Spring-IOC-注入" class="headerlink" title="Spring IOC 注入"></a>Spring IOC 注入</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>application.xml 开启自动化装配的注释扫描<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--开启自动化装配（注入）--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="Resource注入"><a href="#Resource注入" class="headerlink" title="@Resource注入"></a>@Resource注入</h3><p>@Resource注解 实现自动注入(反射)</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xquery">默认 根据属性字段名称 查找对应 bean对象<br>如果属性字段名称为找到 通过 类型查找<br>可以设<span class="hljs-built_in">置name</span>属性<span class="hljs-built_in"> name</span>与标<span class="hljs-built_in">签id</span>对应<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Resource(name = &quot;userDao01&quot;)</span> <span class="hljs-comment">// name属性值与其中一个实现类的bean标签的id属性值一致</span><br>    <span class="hljs-keyword">private</span> IUserDao iUserDao; <span class="hljs-comment">// 注入接口（接口存在多个实现）</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        iUserDao.test();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Autowired注解"><a href="#Autowired注解" class="headerlink" title="@Autowired注解"></a>@Autowired注解</h3><p>@Autowired注解实现自动注入</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">默认通过类型 查找bean对象 与属性字段名称无关<br>可以添加<span class="hljs-meta">@Qualifier</span>结合使用,通过value属性值查找bean对象<br>可以声明在<span class="hljs-keyword">set</span>方法上<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Autowired</span>注解实现自动化注入</span><br><span class="hljs-comment"> *  可以添加<span class="hljs-doctag">@Qualifier</span>结合使用，通过value属性值查找bean对象</span><br><span class="hljs-comment"> value属性值必须要设置，且值要与bean标签的id属性值对应</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(value=&quot;userDao&quot;)</span> <span class="hljs-comment">// value属性值必须要设置，且值要与bean标签的id属性值对应</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        userDao.test();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Spring-IOC-扫描器"><a href="#Spring-IOC-扫描器" class="headerlink" title="Spring IOC 扫描器"></a>Spring IOC 扫描器</h2><h3 id="Spring-IOC-扫描器的配置"><a href="#Spring-IOC-扫描器的配置" class="headerlink" title="Spring IOC 扫描器的配置"></a>Spring IOC 扫描器的配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">Spring</span> IOC 扫描器<br>    作用: bean对象统一进行管理,简化开发配置,提高开发效率<br><br><span class="hljs-number">1</span> 设置自动化扫描的范围<br>    如果bean对象未在指定包范围,即使声明了注释,也无法实例化<br><span class="hljs-number">2</span> 使用指定的注释<br>    Dao层           ==      <span class="hljs-variable">@Repository</span><br>    Service         ==      <span class="hljs-variable">@Service</span><br>    Controller      ==      <span class="hljs-variable">@Controller</span><br>    任意类          ==      <span class="hljs-variable">@Component</span><br></code></pre></td></tr></table></figure><ul><li>准备工作 application.xml开启自动化扫描范围<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 设置自动化扫描的范围 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.xxxx&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h1><h2 id="Spring-AOP-简介"><a href="#Spring-AOP-简介" class="headerlink" title="Spring AOP 简介"></a>Spring AOP 简介</h2><h3 id="AOP是什么"><a href="#AOP是什么" class="headerlink" title="AOP是什么"></a>AOP是什么</h3><p>面向切面编程(Aspect Oriented Programing),相比较oop面向对象编程来说,更多的是一种面到面得切入,即层与层之间的一种切入,所以称之为切面。</p><h3 id="AOP能做什么"><a href="#AOP能做什么" class="headerlink" title="AOP能做什么"></a>AOP能做什么</h3><p>AOP主要应用于日志记录,性能统计,安全控制,事务处理等方面,实现公共功能性的重复使用</p><h3 id="AOP特点"><a href="#AOP特点" class="headerlink" title="AOP特点"></a>AOP特点</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>降低 模块与模块之间的耦合度,提高业务代码的聚合度(高内聚低耦合)<br><span class="hljs-symbol">2 </span>提高了代码的复用性<br><span class="hljs-symbol">3 </span>提高系统的扩展性<br><span class="hljs-symbol">4 </span>可以在不影响原有功能基础上添加新的功能<br></code></pre></td></tr></table></figure><h3 id="AOP的底层实现"><a href="#AOP的底层实现" class="headerlink" title="AOP的底层实现"></a>AOP的底层实现</h3><p>动态代理(JDK + CGLIB) 了解</p><h3 id="AOP基本概念"><a href="#AOP基本概念" class="headerlink" title="AOP基本概念"></a>AOP基本概念</h3><h4 id="横切关注点"><a href="#横切关注点" class="headerlink" title="横切关注点"></a>横切关注点</h4><p>散落在业务层里面的一些功能代码</p><h4 id="Aspect-切面"><a href="#Aspect-切面" class="headerlink" title="Aspect(切面)"></a>Aspect(切面)</h4><p>把所有横切关注点抽象出来,封装成Java类,再把Java类变为切面类</p><h4 id="Advice-通知"><a href="#Advice-通知" class="headerlink" title="Advice(通知)"></a>Advice(通知)</h4><p>通知: 切面类里面实现具体业务的方法(如: 开启事务 回滚事务 提交事务)</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">Aspect</span> 支持<span class="hljs-number">5</span>种类型的通知注解<br><span class="hljs-variable">@Before</span>         前置通知,再方法执行之前执行<br><span class="hljs-variable">@After</span>          后置通知,在方法执行之后执行<br><span class="hljs-variable">@AfterRunning</span>   返回通知,在方法返回结果之后执行<br><span class="hljs-variable">@AfterThrowing</span>  异常通知,在方法抛出异常之后<br><span class="hljs-variable">@Around</span>         环绕通知,围绕着方法执行<br></code></pre></td></tr></table></figure><h4 id="Target-目标对象"><a href="#Target-目标对象" class="headerlink" title="Target(目标对象)"></a>Target(目标对象)</h4><p>拥有当前业务功能实现的类</p><h4 id="代理对象"><a href="#代理对象" class="headerlink" title="代理对象"></a>代理对象</h4><p>IOC容器自动将切面类生成所对应的代理对象</p><h4 id="Joinpoint-连接点"><a href="#Joinpoint-连接点" class="headerlink" title="Joinpoint(连接点)"></a>Joinpoint(连接点)</h4><p>程序执行的某个特定位置,封装方法操作的细节(获取:方法参数,方法名等)</p><h4 id="Pointcut-切入点"><a href="#Pointcut-切入点" class="headerlink" title="Pointcut(切入点)"></a>Pointcut(切入点)</h4><p>切点表达式: 指明当前通知作用到具体某个业务方法上</p><h1 id="Spring-AOP的实现"><a href="#Spring-AOP的实现" class="headerlink" title="Spring AOP的实现"></a>Spring AOP的实现</h1><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">pom.xml <span class="hljs-operator">=</span><span class="hljs-operator">=</span> application.xml开启AOP代理配置 <span class="hljs-operator">=</span><span class="hljs-operator">=</span> 实现Aspect类<br></code></pre></td></tr></table></figure><h2 id="AOP-注解实现"><a href="#AOP-注解实现" class="headerlink" title="AOP 注解实现"></a>AOP 注解实现</h2><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.8.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置文件-application-xml"><a href="#配置文件-application-xml" class="headerlink" title="配置文件(application.xml)"></a>配置文件(application.xml)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 设置自动化扫描的范围 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.xxxx&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!--配置AOP代理:开启Spring AOP--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="切面类"><a href="#切面类" class="headerlink" title="切面类"></a>切面类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**日志切面类:IOC容器自动生成代理对象 </span><br><span class="hljs-comment"> * 如何把一个普通的类转换成切面</span><br><span class="hljs-comment"> *   1.交给Spring IOC容器管理  <span class="hljs-doctag">@Component</span></span><br><span class="hljs-comment"> *   2.声明为一个切面                         <span class="hljs-doctag">@Aspect</span></span><br><span class="hljs-comment"> * */</span><br><span class="hljs-meta">@Order(1)</span><span class="hljs-comment">//指定切面的优先级,数字越小优先级越高</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component(&quot;mathAspectLog&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathAspectLog</span> &#123;<br><span class="hljs-comment">/**前置通知: 在方法执行之前执行,记录目标方法的执行开始位置</span><br><span class="hljs-comment"> * JoinPoint:连接点,封装了很多方法操作的细节   比如:方法名和参数</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-meta">@Before(&quot;execution(* com.xxxx.service.MathUtilImpl.add(int,int))&quot;)</span><span class="hljs-comment">//切点表达式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br><span class="hljs-comment">//通过连接点获取方法参数</span><br>Object[] args=joinPoint.getArgs();<br><span class="hljs-comment">//通过连接点先获取方法签名,在获取方法名</span><br>String methodName=joinPoint.getSignature().getName();<br>System.out.println(<span class="hljs-string">&quot;前置通知&gt;&gt;&gt;日志:The method &quot;</span>+methodName+<span class="hljs-string">&quot; begin with &quot;</span>+Arrays.asList(args));<br>&#125;<br><br><span class="hljs-comment">/**后置通知: 在方法执行之后执行,记录目标方法的执行结束位置</span><br><span class="hljs-comment"> *  1.后置通知得不到方法返回值  2.不管方法是否发生异常度执行</span><br><span class="hljs-comment"> * JoinPoint:连接点,封装了很多方法操作的细节   比如:方法名和参数</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-meta">@After(&quot;execution(* com.xxxx.service.MathUtilImpl.add(int,int))&quot;)</span><span class="hljs-comment">//切点表达式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br><span class="hljs-comment">//通过连接点获取方法参数</span><br>Object[] args=joinPoint.getArgs();<br><span class="hljs-comment">//通过连接点先获取方法签名,在获取方法名</span><br>String methodName=joinPoint.getSignature().getName();<br>System.out.println(<span class="hljs-string">&quot;后置通知&gt;&gt;&gt;日志:The method &quot;</span>+methodName+<span class="hljs-string">&quot; end with &quot;</span>+Arrays.asList(args));<br>&#125;<br><br><span class="hljs-comment">/**返回通知:在目标方法执行之后执行,可以访问目标方法的执行结果</span><br><span class="hljs-comment"> *    (异常之后不执行)</span><br><span class="hljs-comment"> * JoinPoint:连接点,封装了很多方法操作的细节   比如:方法名和参数</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-meta">@AfterReturning(value=&quot;execution(* com.xxxx.service.MathUtilImpl.add(int,int))&quot;,returning=&quot;result&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterRun</span><span class="hljs-params">(JoinPoint joinPoint,Object result)</span>&#123;<br>String methodName=joinPoint.getSignature().getName();<br>System.out.println(<span class="hljs-string">&quot;返回通知&gt;&gt;&gt;日志:The method &quot;</span>+methodName+<span class="hljs-string">&quot; return result:  &quot;</span>+result);<br>&#125;<br><br><span class="hljs-comment">/**异常通知:在目标方法发生异常时候执行,可以访问到异常对象</span><br><span class="hljs-comment"> * JoinPoint:连接点,封装了很多方法操作的细节   比如:方法名和参数</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-meta">@AfterThrowing(value=&quot;execution(* com.xxxx.service.MathUtilImpl.add(int,int))&quot;,throwing=&quot;e&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">(JoinPoint joinPoint,Throwable e)</span>&#123;<br>String methodName=joinPoint.getSignature().getName();<br>System.out.println(<span class="hljs-string">&quot;异常通知&gt;&gt;&gt;日志:The method &quot;</span>+methodName+<span class="hljs-string">&quot; throwing 异常:  &quot;</span>+e);<br>&#125;<br><br><span class="hljs-comment">/**环绕通知:需要携带ProceedingJoinPoint类型的参数,可以决定是否执行目标方法</span><br><span class="hljs-comment"> *   1.环绕通知类似动态代理全过程</span><br><span class="hljs-comment"> *   2.环绕通知必须有返回值,返回值即为目标方法的返回值</span><br><span class="hljs-comment">  */</span><br><span class="hljs-meta">@Around(&quot;execution(* com.xxxx.service.MathUtilImpl.add(int,int))&quot;)</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">Around</span><span class="hljs-params">(ProceedingJoinPoint pjd)</span>&#123;<br>Object[] args=pjd.getArgs();<br>String methodName=pjd.getSignature().getName();<br>Object result=<span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//前置通知</span><br>System.out.println(<span class="hljs-string">&quot;环绕通知&gt;&gt;&gt;日志:The method &quot;</span>+methodName+<span class="hljs-string">&quot; begin with &quot;</span>+Arrays.asList(args));<br>result=pjd.proceed();<span class="hljs-comment">//执行目标方法</span><br><span class="hljs-comment">//后置通知 </span><br>System.out.println(<span class="hljs-string">&quot;环绕通知&gt;&gt;&gt;日志:The method &quot;</span>+methodName+<span class="hljs-string">&quot; end with &quot;</span>+Arrays.asList(args));<br>&#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>e.printStackTrace();<br><span class="hljs-comment">//异常通知</span><br>System.out.println(<span class="hljs-string">&quot;环绕通知&gt;&gt;&gt;日志:The method &quot;</span>+methodName+<span class="hljs-string">&quot; throwing 异常:  &quot;</span>+e);<br>&#125;<br><span class="hljs-comment">//返回通知</span><br>System.out.println(<span class="hljs-string">&quot;环绕通知&gt;&gt;&gt;日志:The method &quot;</span>+methodName+<span class="hljs-string">&quot; return result:  &quot;</span>+result);<br><span class="hljs-keyword">return</span> result;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>定义连接点<br><img src="/img/spring/new/1.1.6.png"></li></ul><h2 id="AOP-xml配置实现"><a href="#AOP-xml配置实现" class="headerlink" title="AOP xml配置实现"></a>AOP xml配置实现</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>定义切面类 <br><span class="hljs-symbol">2 </span>配置文件(application.xmls)<br></code></pre></td></tr></table></figure><h3 id="定义切面类"><a href="#定义切面类" class="headerlink" title="定义切面类"></a>定义切面类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**日志切面类:IOC容器自动生成代理对象 </span><br><span class="hljs-comment"> * 如何把一个普通的类转换成切面</span><br><span class="hljs-comment"> *   1.交给Spring IOC容器管理  <span class="hljs-doctag">@Component</span></span><br><span class="hljs-comment"> *   2.声明为一个切面                         <span class="hljs-doctag">@Aspect</span></span><br><span class="hljs-comment"> * */</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component(&quot;mathAspectLogXml&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathAspectLogXml</span> &#123;<br><span class="hljs-comment">/**前置通知: 在方法执行之前执行,记录目标方法的执行开始位置</span><br><span class="hljs-comment"> * JoinPoint:连接点,封装了很多方法操作的细节   比如:方法名和参数</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br><span class="hljs-comment">//通过连接点获取方法参数</span><br>Object[] args=joinPoint.getArgs();<br><span class="hljs-comment">//通过连接点先获取方法签名,在获取方法名</span><br>String methodName=joinPoint.getSignature().getName();<br>System.out.println(<span class="hljs-string">&quot;前置通知&gt;&gt;&gt;日志:The method &quot;</span>+methodName+<span class="hljs-string">&quot; begin with &quot;</span>+Arrays.asList(args));<br>&#125;<br><br><span class="hljs-comment">/**后置通知: 在方法执行之后执行,记录目标方法的执行结束位置</span><br><span class="hljs-comment"> *  1.后置通知得不到方法返回值  2.不管方法是否发生异常度执行</span><br><span class="hljs-comment"> * JoinPoint:连接点,封装了很多方法操作的细节   比如:方法名和参数</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br><span class="hljs-comment">//通过连接点获取方法参数</span><br>Object[] args=joinPoint.getArgs();<br><span class="hljs-comment">//通过连接点先获取方法签名,在获取方法名</span><br>String methodName=joinPoint.getSignature().getName();<br>System.out.println(<span class="hljs-string">&quot;后置通知&gt;&gt;&gt;日志:The method &quot;</span>+methodName+<span class="hljs-string">&quot; end with &quot;</span>+Arrays.asList(args));<br>&#125;<br><br><span class="hljs-comment">/**返回通知:在目标方法执行之后执行,可以访问目标方法的执行结果</span><br><span class="hljs-comment"> *    (异常之后不执行)</span><br><span class="hljs-comment"> * JoinPoint:连接点,封装了很多方法操作的细节   比如:方法名和参数</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterRun</span><span class="hljs-params">(JoinPoint joinPoint,Object result)</span>&#123;<br>String methodName=joinPoint.getSignature().getName();<br>System.out.println(<span class="hljs-string">&quot;返回通知&gt;&gt;&gt;日志:The method &quot;</span>+methodName+<span class="hljs-string">&quot; return result:  &quot;</span>+result);<br>&#125;<br><br><span class="hljs-comment">/**异常通知:在目标方法发生异常时候执行,可以访问到异常对象</span><br><span class="hljs-comment"> * JoinPoint:连接点,封装了很多方法操作的细节   比如:方法名和参数</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">(JoinPoint joinPoint,Throwable e)</span>&#123;<br>String methodName=joinPoint.getSignature().getName();<br>System.out.println(<span class="hljs-string">&quot;异常通知&gt;&gt;&gt;日志:The method &quot;</span>+methodName+<span class="hljs-string">&quot; throwing 异常:  &quot;</span>+e);<br>&#125;<br><br><span class="hljs-comment">/**环绕通知:需要携带ProceedingJoinPoint类型的参数,可以决定是否执行目标方法</span><br><span class="hljs-comment"> *   1.环绕通知类似动态代理全过程</span><br><span class="hljs-comment"> *   2.环绕通知必须有返回值,返回值即为目标方法的返回值</span><br><span class="hljs-comment">  */</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">Around</span><span class="hljs-params">(ProceedingJoinPoint pjd)</span>&#123;<br>Object[] args=pjd.getArgs();<br>String methodName=pjd.getSignature().getName();<br>Object result=<span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//前置通知</span><br>System.out.println(<span class="hljs-string">&quot;环绕通知&gt;&gt;&gt;日志:The method &quot;</span>+methodName+<span class="hljs-string">&quot; begin with &quot;</span>+Arrays.asList(args));<br>result=pjd.proceed();<span class="hljs-comment">//执行目标方法</span><br><span class="hljs-comment">//后置通知 </span><br>System.out.println(<span class="hljs-string">&quot;环绕通知&gt;&gt;&gt;日志:The method &quot;</span>+methodName+<span class="hljs-string">&quot; end with &quot;</span>+Arrays.asList(args));<br>&#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>e.printStackTrace();<br><span class="hljs-comment">//异常通知</span><br>System.out.println(<span class="hljs-string">&quot;环绕通知&gt;&gt;&gt;日志:The method &quot;</span>+methodName+<span class="hljs-string">&quot; throwing 异常:  &quot;</span>+e);<br>&#125;<br><span class="hljs-comment">//返回通知</span><br>System.out.println(<span class="hljs-string">&quot;环绕通知&gt;&gt;&gt;日志:The method &quot;</span>+methodName+<span class="hljs-string">&quot; return result:  &quot;</span>+result);<br><span class="hljs-keyword">return</span> result;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="application-xml"><a href="#application-xml" class="headerlink" title="application.xml"></a>application.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置AOP --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 配置切点表达式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span></span><br><span class="hljs-tag"><span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.xxxx.service.*.add(int,int))&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">id</span>=<span class="hljs-string">&quot;logPointcut&quot;</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置切面 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;mathAspectLogXml&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 配置通知 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;logPointcut&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;after&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;logPointcut&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:after-returning</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterRun&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;logPointcut&quot;</span> <span class="hljs-attr">returning</span>=<span class="hljs-string">&quot;result&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:after-throwing</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterThrowing&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;logPointcut&quot;</span> <span class="hljs-attr">throwing</span>=<span class="hljs-string">&quot;e&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="AOP配置模板"><a href="#AOP配置模板" class="headerlink" title="AOP配置模板"></a>AOP配置模板</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--aop相关配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--aop切面--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;mathAspectLog&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><br>     <span class="hljs-comment">&lt;!-- 定义aop 切入点 --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;logPointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.xxxx.service.*.*(..))&quot;</span>/&gt;</span><br>     <span class="hljs-comment">&lt;!-- 配置前置通知 指定前置通知方法名  并引用切入点定义 --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;logPointcut&quot;</span>/&gt;</span><br>     <span class="hljs-comment">&lt;!-- 配置返回通知 指定返回通知方法名  并引用切入点定义 --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-returning</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterReturn&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;logPointcut&quot;</span>/&gt;</span><br>     <span class="hljs-comment">&lt;!-- 配置异常通知  指定异常通知方法名  并引用切入点定义 --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">aop:after-throwing</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;afterThrow&quot;</span> <span class="hljs-attr">throwing</span>=<span class="hljs-string">&quot;e&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;logPointcut&quot;</span>/&gt;</span><br>     <span class="hljs-comment">&lt;!-- 配置最终通知  指定最终通知方法名  并引用切入点定义 --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;after&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;logPointcut&quot;</span>/&gt;</span><br>     <span class="hljs-comment">&lt;!-- 配置环绕通知  指定环绕通知方法名  并引用切入点定义 --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">aop:around</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;around&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;logPointcut&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//切点表达式 重用</span><br><span class="hljs-meta">@Pointcut(&quot;execution(* com.xxxx.service.*.*(int,int))&quot;)</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">LogCutPoint</span><span class="hljs-params">()</span>&#123;&#125;;    <br>      <br><span class="hljs-comment">//切点表达式 使用</span><br><span class="hljs-meta">@Before(&quot;LogCutPoint()&quot;)</span> <span class="hljs-comment">//切点表达式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123; ....  &#125;   <br>      <br><span class="hljs-comment">//切面优先级,值越小,优先级越高.</span><br><span class="hljs-meta">@Order(1)</span>  <br></code></pre></td></tr></table></figure><h1 id="Spring-整合JDBC-环境"><a href="#Spring-整合JDBC-环境" class="headerlink" title="Spring 整合JDBC 环境"></a>Spring 整合JDBC 环境</h1><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">pom.xml <span class="hljs-operator">=</span><span class="hljs-operator">=</span> jdbc.properties <span class="hljs-operator">=</span><span class="hljs-operator">=</span> application.xml <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <br></code></pre></td></tr></table></figure><h3 id="pom-xml-1"><a href="#pom-xml-1" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 添加相关的依赖坐标 --&gt;</span><br><span class="hljs-comment">&lt;!-- spring 框架坐标依赖添加 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- spring 测试环境 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- aop --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- spring jdbc --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- spring事物 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- mysql 驱动包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.19<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- c3p0 连接池 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mchange<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="添加jdbc配置文件"><a href="#添加jdbc配置文件" class="headerlink" title="添加jdbc配置文件"></a>添加jdbc配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"># 驱动名<br>jdbc.driver=com.mysql.cj.jdbc.Driver<br># 数据库连接<br>jdbc.url=jdbc:mysql://localhost:3306/(数据库名称)?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;useSSL=false<br># 数据库用户名称<br>jdbc.user=(数据库账号)<br># 数据库用户密码<br>jdbc.password=(数据库密码)<br></code></pre></td></tr></table></figure><h3 id="application-xml-添加"><a href="#application-xml-添加" class="headerlink" title="application.xml 添加"></a>application.xml 添加</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 加载properties 配置文件，用来读取jdbc.properties文件中的数据 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><ul><li>数据池+模板类配置<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Spring扫描注解的配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.xxxx&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 加载properties 配置文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span> /&gt;</span><br>    <br><br>    <span class="hljs-comment">&lt;!-- 配置 c3p0 数据源 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 不同数据源 class 不同 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- property标签的value属性对应的是jdbc.properties中的值 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.user&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置JdbcTemplate实例，并注入一个dataSource数据源--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="JdbcTemplate的API"><a href="#JdbcTemplate的API" class="headerlink" title="JdbcTemplate的API"></a>JdbcTemplate的API</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">编程步骤:<br>   a).获取JdbcTemplate对象<br>   b).通过JdbcTemplate对象操作数据库<br>      <span class="hljs-keyword">update</span>:增删改<br>      query:查询    <br>   <br>    //处理 插入,删除,更新数据<br>    <span class="hljs-type">int</span>   <span class="hljs-keyword">update</span>(String <span class="hljs-keyword">sql</span>,<span class="hljs-keyword">Object</span>[])<br>    //批量处理 插入,删除,更新数据<br>    <span class="hljs-type">int</span>[] batchUpdate(String <span class="hljs-keyword">sql</span>,List&lt;<span class="hljs-keyword">Object</span>[]&gt;)<br>     <br>    //查询单行 数据<br>    //RowMapper:指定如何去映射结果集的行,常用的实现类<br>    //  <span class="hljs-built_in">new</span> BeanPropertyRowMapper&lt;<span class="hljs-keyword">User</span>&gt;(<span class="hljs-keyword">User</span>.<span class="hljs-keyword">class</span>)<br>    <span class="hljs-keyword">Object</span> queryForObject(<span class="hljs-keyword">sql</span>, rowMapper,<span class="hljs-number">1</span>):<br>    <br>    //查询多行 数据<br>    List&lt;<span class="hljs-keyword">Object</span>&gt; query(<span class="hljs-keyword">sql</span>, rowMapper,<span class="hljs-number">1</span>)<br><br>    //查询单值 数据  <span class="hljs-keyword">select</span> count(*) <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id&gt;?;<br>    queryForObject(<span class="hljs-keyword">sql</span>,Long.<span class="hljs-keyword">class</span>,<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="JDBC测试类"><a href="#JDBC测试类" class="headerlink" title="JDBC测试类"></a>JDBC测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JdbcTemplate 数据库模板工具类  测试</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcTemplateTest</span> &#123;<br><br><span class="hljs-keyword">private</span> JdbcTemplate jdbcTemplate;<br><br><span class="hljs-comment">/**在所有标注<span class="hljs-doctag">@Test</span>注解的方法   执行之前 先执行<span class="hljs-doctag">@Before</span>标注的方法 */</span><br><span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//获取IOC容器</span><br>ClassPathXmlApplicationContext ac=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring.xml&quot;</span>);<br><span class="hljs-comment">//获取数据库模板类JdbcTemplate</span><br>jdbcTemplate = (JdbcTemplate) ac.getBean(<span class="hljs-string">&quot;jdbcTemplate&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/**jdbc.update:插入数据*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">()</span>&#123;<br>User user=<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;徐凤年&quot;</span>,<span class="hljs-string">&quot;1234&quot;</span>);<br>String sql=<span class="hljs-string">&quot;insert into tb_user(username,pwd) values(?,?)&quot;</span>;<br>Object[] args=&#123;user.getUsername(),user.getPwd()&#125;;<br><span class="hljs-comment">//通过jdbcTemplate插入数据</span><br><span class="hljs-type">int</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> jdbcTemplate.update(sql, args);<br><br>System.out.println(<span class="hljs-string">&quot;影响数据库的条目数: &quot;</span>+update);<br>&#125;<br><br><span class="hljs-comment">/**jdbc.update:修改数据*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>&#123;<br>User user=<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;徐骁&quot;</span>,<span class="hljs-string">&quot;666666&quot;</span>);<br><br>String sql=<span class="hljs-string">&quot;update tb_user set username=?,pwd=? where id=?&quot;</span>;<br>Object[] args=&#123;user.getUsername(),user.getPwd(),<span class="hljs-number">21</span>&#125;;<br><span class="hljs-comment">//通过jdbcTemplate修改数据</span><br><span class="hljs-type">int</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> jdbcTemplate.update(sql, args);<br><br>System.out.println(<span class="hljs-string">&quot;影响数据库的条目数: &quot;</span>+update);<br>&#125;<br><br><span class="hljs-comment">/**jdbc.update:删除数据*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span>&#123;<br>String sql=<span class="hljs-string">&quot;delete from tb_user where id=?&quot;</span>;<br>Object[] args=&#123;<span class="hljs-number">21</span>&#125;;<br><span class="hljs-comment">//通过jdbcTemplate删除数据</span><br><span class="hljs-type">int</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> jdbcTemplate.update(sql, args);<br><br>System.out.println(<span class="hljs-string">&quot;影响数据库的条目数: &quot;</span>+update);<br>&#125;<br><br><span class="hljs-comment">/**jdbc.batchUpdate:批量插入数据*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveBach</span><span class="hljs-params">()</span>&#123;<br>String sql=<span class="hljs-string">&quot;insert into tb_user(username,pwd) values(?,?)&quot;</span>;<br>List&lt;Object[]&gt; batchArgs=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object[]&gt;();<br>batchArgs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;AAA&quot;</span>,<span class="hljs-string">&quot;1111&quot;</span>&#125;);<br>batchArgs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;BBB&quot;</span>,<span class="hljs-string">&quot;2222&quot;</span>&#125;);<br>batchArgs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;CCC&quot;</span>,<span class="hljs-string">&quot;3333&quot;</span>&#125;);<br><span class="hljs-comment">//通过jdbcTemplate插入数据</span><br><span class="hljs-type">int</span>[] updates = jdbcTemplate.batchUpdate(sql,batchArgs);<br><br>System.out.println(<span class="hljs-string">&quot;影响数据库的条目数: &quot;</span>+Arrays.toString(updates));<br>&#125;<br><br><span class="hljs-comment">/**jdbc.batchUpdate:批量修改数据*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBach</span><span class="hljs-params">()</span>&#123;<br>String sql=<span class="hljs-string">&quot;update tb_user set username=?,pwd=? where id=?&quot;</span>;<br>List&lt;Object[]&gt; batchArgs=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object[]&gt;();<br>batchArgs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;AAA666&quot;</span>,<span class="hljs-string">&quot;1111666&quot;</span>,<span class="hljs-number">22</span>&#125;);<br>batchArgs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;BBB666&quot;</span>,<span class="hljs-string">&quot;2222666&quot;</span>,<span class="hljs-number">23</span>&#125;);<br>batchArgs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;CCC666&quot;</span>,<span class="hljs-string">&quot;3333666&quot;</span>,<span class="hljs-number">24</span>&#125;);<br><span class="hljs-comment">//通过jdbcTemplate修改数据</span><br><span class="hljs-type">int</span>[] updates = jdbcTemplate.batchUpdate(sql,batchArgs);<br><br>System.out.println(<span class="hljs-string">&quot;影响数据库的条目数: &quot;</span>+Arrays.toString(updates));<br>&#125;<br><br><span class="hljs-comment">/**jdbc.batchUpdate:批量删除数据*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteBach</span><span class="hljs-params">()</span>&#123;<br>String sql=<span class="hljs-string">&quot;delete from tb_user where id=?&quot;</span>;<br>List&lt;Object[]&gt; batchArgs=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object[]&gt;();<br>batchArgs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-number">22</span>&#125;);<br>batchArgs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-number">23</span>&#125;);<br>batchArgs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-number">24</span>&#125;);<br><span class="hljs-comment">//通过jdbcTemplate删除数据</span><br><span class="hljs-type">int</span>[] updates = jdbcTemplate.batchUpdate(sql, batchArgs);<br><br>System.out.println(<span class="hljs-string">&quot;影响数据库的条目数: &quot;</span>+Arrays.toString(updates));<br>&#125;<br><br><span class="hljs-comment">/** 查询单行 数据:jdbc.queryForObject</span><br><span class="hljs-comment"> *    RowMapper:接口,不能直接创建对象,只能创建子类对象</span><br><span class="hljs-comment"> *      作用:bean属性和数据库字段 进行 一一映射</span><br><span class="hljs-comment"> *    使用子类:BeanPropertyRowMapper&lt;User&gt;(User.class)</span><br><span class="hljs-comment"> *  */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectOne</span><span class="hljs-params">()</span>&#123;<br>String sql=<span class="hljs-string">&quot;select * from tb_user where id=?&quot;</span>;<br>RowMapper&lt;User&gt; rowMapper=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;User&gt;(User.class);<br>Object[] args=&#123;<span class="hljs-number">25</span>&#125;;<br><span class="hljs-comment">//通过jdbcTemplate查询数据</span><br><span class="hljs-type">User</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql,rowMapper,args);<br><br>System.out.println(<span class="hljs-string">&quot;查询结果是: &quot;</span>+obj);<br>&#125;<br><br><span class="hljs-comment">/** 查询多行 数据:使用jdbc.query 而不用jdbc.queryForList</span><br><span class="hljs-comment"> *    RowMapper:接口,不能直接创建对象,只能创建子类对象</span><br><span class="hljs-comment"> *      作用:bean属性和数据库字段 进行 一一映射</span><br><span class="hljs-comment"> *    使用子类:BeanPropertyRowMapper&lt;User&gt;(User.class)</span><br><span class="hljs-comment"> *  */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectMany</span><span class="hljs-params">()</span>&#123;<br>String sql=<span class="hljs-string">&quot;select * from tb_user where id in (?,?)&quot;</span>;<br>RowMapper&lt;User&gt; rowMapper=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPropertyRowMapper</span>&lt;User&gt;(User.class);<br>Object[] args=&#123;<span class="hljs-number">25</span>,<span class="hljs-number">26</span>&#125;;<br><span class="hljs-comment">//通过jdbcTemplate查询数据</span><br>List&lt;User&gt; users = jdbcTemplate.query(sql,rowMapper,args);<br><br>System.out.println(<span class="hljs-string">&quot;查询结果是: &quot;</span>+users);<br>&#125;<br><br><span class="hljs-comment">/**查询单值 数据 :jdbc.queryForObject*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectOneValue</span><span class="hljs-params">()</span>&#123;<br>String sql=<span class="hljs-string">&quot;select count(*) from tb_user where id&gt;=?&quot;</span>;<br>Class&lt;?&gt; requiredType=Integer.class; <span class="hljs-comment">//指定返回结果的数据类型</span><br>Object[] args=&#123;<span class="hljs-number">25</span>&#125;;<br><span class="hljs-comment">//通过jdbcTemplate查询数据</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> jdbcTemplate.queryForObject(sql,requiredType,args);<br><br>System.out.println(<span class="hljs-string">&quot;查询结果是: &quot;</span>+sum);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Spring-事务控制"><a href="#Spring-事务控制" class="headerlink" title="Spring 事务控制"></a>Spring 事务控制</h1><h2 id="Spring-事务控制-简介"><a href="#Spring-事务控制-简介" class="headerlink" title="Spring 事务控制 简介"></a>Spring 事务控制 简介</h2><h3 id="事务四大特性-ACID"><a href="#事务四大特性-ACID" class="headerlink" title="事务四大特性(ACID)"></a>事务四大特性(ACID)</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs">原子性<br>    事务是一个原子操作<br>一致性<br>    事务在执行前后,数据库种数据要保持一直性状态<br>隔离性<br>    事务与事务之间的执行应当是相互隔离互不影响<br>持久性<br>    事务提交完毕后,数据库种的数据的改变是永久的<br></code></pre></td></tr></table></figure><h3 id="Spring-事务核心接口"><a href="#Spring-事务核心接口" class="headerlink" title="Spring 事务核心接口"></a>Spring 事务核心接口</h3><p>Spring 事务管理器的接口是org.springframework.transaction.PlatformTransactionManager</p><h4 id="JDBC事务"><a href="#JDBC事务" class="headerlink" title="JDBC事务"></a>JDBC事务</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Spring事务控制配置-xml"><a href="#Spring事务控制配置-xml" class="headerlink" title="Spring事务控制配置 xml"></a>Spring事务控制配置 xml</h3><p>jdbc 持久化事务,对于事务配置实现有两种方式: xml配置/注解配置</p><ul><li>application.xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/tx</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/tx/spring-tx.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">   http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 开启AOP代理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span> /&gt;</span><br><br><span class="hljs-comment">&lt;!-- 事务管理器定义 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txManager&quot;</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;txManager&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--对以add update delete query开头的所有方法进行事务处理--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--定义什么方法需要使用事务  name代表的是方法名（或方法匹配）--&gt;</span><br>        <span class="hljs-comment">&lt;!-- 匹配以 add 开头的所有方法均加入事务 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;add*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 匹配以 update 开头的所有方法均加入事务 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;update*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 匹配以 delete 开头的所有方法均加入事务 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;delete*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 匹配以 query 开头的所有方法均加入事务 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;query*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- aop 切面定义 （切入点和通知） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 设置切入点 设置需要被拦截的方法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.xxxx.service..*.*(..) )&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cut&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- 设置通知 事务通知 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;cut&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="Spring-事务控制-注释配置"><a href="#Spring-事务控制-注释配置" class="headerlink" title="Spring 事务控制 注释配置"></a>Spring 事务控制 注释配置</h3><h4 id="配置事务管理器"><a href="#配置事务管理器" class="headerlink" title="配置事务管理器"></a>配置事务管理器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- spring 注解式事务声明 --&gt;</span><br><span class="hljs-comment">&lt;!-- 事务管理器定义 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txManager&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="配置注解支持"><a href="#配置注解支持" class="headerlink" title="配置注解支持"></a>配置注解支持</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;txManager&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id="方法上加入事务注解-一般是service"><a href="#方法上加入事务注解-一般是service" class="headerlink" title="方法上加入事务注解(一般是service)"></a>方法上加入事务注解(一般是service)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(propagation=Propagation.REQUIRED)</span> <span class="hljs-comment">// 声明式 事物管理</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">(String username, String isbn, <span class="hljs-type">int</span> qty)</span> &#123;<br>    <span class="hljs-comment">//省略业务代码</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java</title>
    <link href="/2022/06/03/Java/"/>
    <url>/2022/06/03/Java/</url>
    
    <content type="html"><![CDATA[<h1 id="实训java"><a href="#实训java" class="headerlink" title="实训java"></a>实训java</h1><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="集合基础"><a href="#集合基础" class="headerlink" title="集合基础"></a>集合基础</h2><ul><li>Java集合类型(Collection和Map)<br><img src="/img/java/2.1.1.png"></li></ul><p class="note note-primary">Collection: 集合框架的顶级接口</p><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p class="note note-primary">ArrayList的 增删改查 + 遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 增删改查</span><br>    List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;(<span class="hljs-number">2</span>);<br><br>    <span class="hljs-comment">// 增加</span><br>    list.add(<span class="hljs-string">&quot;1&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;2&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;3&quot;</span>);<br>    System.out.println(list);<br><br>    <span class="hljs-comment">// 删除 ; 下标从0开始;</span><br>    <span class="hljs-comment">// 异常检查: 下标合法性检查(-1); 会与size相比较,检查下标合法否</span><br>    list.remove(<span class="hljs-number">0</span>);<br>    System.out.println(list);<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">remove</span> <span class="hljs-operator">=</span> list.remove(<span class="hljs-string">&quot;-1&quot;</span>);<span class="hljs-comment">// 直接极删除指定对象,底层默认调用对象的equals方法;结果返回boolean</span><br>    System.out.println(remove);<br>    System.out.println(list);<br><br>    <span class="hljs-comment">// 修改</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> list.set(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;0&quot;</span>);<br>    System.out.println(set);<br>    System.out.println(list);<br><br>    <span class="hljs-comment">// 查</span><br>    System.out.println(list.get(<span class="hljs-number">0</span>));<br><br>    <span class="hljs-comment">// 交换</span><br>    System.out.println(<span class="hljs-string">&quot;=====================================&quot;</span>);<br>    list.set( <span class="hljs-number">0</span>,list.set(<span class="hljs-number">1</span>,list.get(<span class="hljs-number">0</span>)) );<br><br>    <span class="hljs-comment">// list的长度</span><br>    System.out.println(list.size()); <span class="hljs-comment">// 元素个数</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 遍历[3]</span><br>    List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">3</span>);<br>    list.add(<span class="hljs-string">&quot;0&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;1&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;2&quot;</span>);<br><br>    System.out.println(<span class="hljs-string">&quot;===========================================for遍历============================================&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;list.size();i++)&#123;<br>        System.out.println(list.get(i));<br>    &#125;<br><br>    System.out.println(<span class="hljs-string">&quot;===========================================增强版for============================================&quot;</span>);<br>    <span class="hljs-keyword">for</span> (String ite:list)&#123;<br>        System.out.println(ite);<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;===========================================Iterator============================================&quot;</span>);<br>    Iterator&lt;String&gt; iterator = list.iterator();<br><br>    <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> iterator.next();<br>        System.out.println(res);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p class="note note-primary">LinkedList 增删改查 + 遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 增 删 改 查</span><br>    List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br><br>    <span class="hljs-comment">// 增</span><br>    list.add(<span class="hljs-string">&quot;0&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;1&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;2&quot;</span>);<br>    System.out.println(list);<br><br>    <span class="hljs-comment">// 删</span><br>    list.remove(<span class="hljs-number">0</span>);<br>    System.out.println(list);<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">remove</span> <span class="hljs-operator">=</span> list.remove(<span class="hljs-string">&quot;1&quot;</span>);<br>    System.out.println(remove);<br>    System.out.println(list);<br><br>    list.add(<span class="hljs-string">&quot;0&quot;</span>);list.add(<span class="hljs-string">&quot;1&quot;</span>);<br>    System.out.println(list);<br>    <span class="hljs-comment">// 改</span><br>    list.set(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;-1&quot;</span>);<br>    System.out.println(list);<br><br>    <span class="hljs-comment">// 查</span><br>    System.out.println(list.get(<span class="hljs-number">0</span>));<br><br>    <span class="hljs-comment">// 交换</span><br>    list.set(<span class="hljs-number">0</span>,list.set(<span class="hljs-number">1</span>,list.get(<span class="hljs-number">0</span>)));<br>    System.out.println(list);<br><br>    <span class="hljs-comment">// 个数</span><br>    System.out.println(list.size());<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// 遍历同理</span><br>    <span class="hljs-comment">// 同一个接口方法相同</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="模拟链表底层实现"><a href="#模拟链表底层实现" class="headerlink" title="模拟链表底层实现"></a>模拟链表底层实现</h3><h3 id="自定义ArrayList"><a href="#自定义ArrayList" class="headerlink" title="自定义ArrayList"></a>自定义ArrayList</h3><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p class="note note-primary">HashSet 增删改查 + 其他操作</p><p><img src="/img/java/2.1.2.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>    Set&lt;User&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;User&gt;();<br>    <span class="hljs-comment">// 增</span><br>    set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;name1&quot;</span>,<span class="hljs-string">&quot;111&quot;</span>));<br>    set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;name2&quot;</span>,<span class="hljs-string">&quot;222&quot;</span>));<br>    set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;name3&quot;</span>,<span class="hljs-string">&quot;333&quot;</span>));<br>    set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;name1&quot;</span>,<span class="hljs-string">&quot;111&quot;</span>)); <span class="hljs-comment">// 自动去重</span><br>    System.out.println(set);<br>    <span class="hljs-comment">// 删除</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">name1</span> <span class="hljs-operator">=</span> set.remove(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;name1&quot;</span>, <span class="hljs-string">&quot;111&quot;</span>));<span class="hljs-comment">// 默认调用User对象的equals方法</span><br>    System.out.println(name1);<br>    System.out.println(set);<br>    <span class="hljs-comment">// 修改</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;name2&quot;</span>,<span class="hljs-string">&quot;222&quot;</span>);<br>    u1.setPwd(<span class="hljs-string">&quot;000&quot;</span>);<br>    set.add(u1);<br>    System.out.println(set);<br><br>    <span class="hljs-comment">// 遍历</span><br>    <span class="hljs-keyword">for</span> (User ite:set)&#123;<br>        System.out.println(ite);<br>    &#125;<br>    <span class="hljs-comment">// set和list相互转换</span><br>    ArrayList&lt;User&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(set);<br>    System.out.println(list);<br>    HashSet&lt;User&gt; set2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(list);<br>    System.out.println(set2);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><p class="note note-primary">Collections: 集合的工具类,封装很多针对集合操作的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>    ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    list.add(<span class="hljs-number">0</span>);list.add(<span class="hljs-number">1</span>);list.add(<span class="hljs-number">2</span>);list.add(<span class="hljs-number">3</span>);<br><br>    <span class="hljs-comment">// 最大最小</span><br>    System.out.println(Collections.max(list));<br>    System.out.println(Collections.min(list));<br>    <span class="hljs-comment">// 打乱</span><br>    System.out.println(list);<br>    Collections.shuffle(list);<br>    System.out.println(list);<br>    <span class="hljs-comment">// 元素交换</span><br>    Collections.swap(list,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br>    System.out.println(list);<br><br>    <span class="hljs-comment">// 排序</span><br>    Collections.sort(list, ((o1, o2) -&gt; o1-o2)); <span class="hljs-comment">// lambda表达式简化 内部匿名类的实现</span><br>    System.out.println(list);<br>    Collections.sort(list,((o1, o2) -&gt; o2-o1));<br>    System.out.println(list);<br><br>    <span class="hljs-comment">// 集合元素的反转</span><br>    Collections.reverse(list);<br>    System.out.println(list);<br><br>    <span class="hljs-comment">// 线程安全</span><br>    Collections.synchronizedList(list);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>    HashMap&lt;String, User&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-comment">// c</span><br>    map.put(<span class="hljs-string">&quot;key1&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;user1&quot;</span>,<span class="hljs-string">&quot;111&quot;</span>));<br>    map.put(<span class="hljs-string">&quot;key2&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1002</span>,<span class="hljs-string">&quot;user2&quot;</span>,<span class="hljs-string">&quot;222&quot;</span>));<br>    map.put(<span class="hljs-string">&quot;key3&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1003</span>,<span class="hljs-string">&quot;user3&quot;</span>,<span class="hljs-string">&quot;333&quot;</span>));<br>    System.out.println(map);<br>    <span class="hljs-comment">// d; 底层调用对象的equals方法,返回被删除的对象</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">key1</span> <span class="hljs-operator">=</span> map.remove(<span class="hljs-string">&quot;key1&quot;</span>);<br>    System.out.println(key1);<br>    System.out.println(map);<br>    <span class="hljs-comment">// u</span><br>    map.put(<span class="hljs-string">&quot;key2&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1111</span>,<span class="hljs-string">&quot;user2&quot;</span>,<span class="hljs-string">&quot;000&quot;</span>));<br>    System.out.println(map);<br>    <span class="hljs-comment">// r</span><br>    System.out.println(map.get(<span class="hljs-string">&quot;key2&quot;</span>));<br><br>    <span class="hljs-comment">// 是否包含key</span><br>    System.out.println(map.containsKey(<span class="hljs-string">&quot;key1&quot;</span>));<br><br>    <span class="hljs-comment">// 是否包含value</span><br>    System.out.println(map.containsValue(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1111</span>, <span class="hljs-string">&quot;user2&quot;</span>, <span class="hljs-string">&quot;000&quot;</span>)));<br><br>    <span class="hljs-comment">// 获取全部key</span><br>    Set&lt;String&gt; keys = map.keySet();<br>    System.out.println(keys);<br><br>    <span class="hljs-comment">// 获取所有value</span><br>    Collection&lt;User&gt; values = map.values();<br>    System.out.println(values);<br><br>    <span class="hljs-comment">// entrySet</span><br>    Set&lt;Map.Entry&lt;String, User&gt;&gt; entries = map.entrySet();<br>    System.out.println(entries);<br><br>    System.out.println(<span class="hljs-string">&quot;=============================================&quot;</span>);<br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;String,User&gt;entry : entries)&#123;<br>        System.out.println(entry);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><p><img src="/img/java/2.1.3.png"></p><p class="note note-primary">输入流,内存数据写入硬盘</br>输出流,文本数据读取到内存中<p></br>字节流,每次读取一个字节的数据;<br></br>字符流,每次读取一个字符的数据;</p><p></br>对象流,每次读写一个对象类型的数据<br></br>IO流使用步骤,1 创建流对象;2 IO流读写操作; 3 关闭流</p></p><h3 id="字节流-InputStream-OutputStream"><a href="#字节流-InputStream-OutputStream" class="headerlink" title="字节流 InputStream / OutputStream"></a>字节流 InputStream / OutputStream</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 字节流:输入流  字节流读取 每次读取一个字节(8bit)</span><br>    <span class="hljs-comment">// 1 创建一个流对象;同时对接文件</span><br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;3.txt&quot;</span>);<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-comment">// 2 IO流读写操作</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> inputStream.read();<br>        <span class="hljs-keyword">if</span> (len == -<span class="hljs-number">1</span>)<span class="hljs-keyword">break</span>;<br>        sb.append((<span class="hljs-type">char</span>)len);<br>    &#125;<br>    <span class="hljs-comment">// 输出结果</span><br>    System.out.println(sb);<br>    <span class="hljs-comment">// 关闭流</span><br>    inputStream.close();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 字节流:输出流</span><br>    <span class="hljs-comment">// 1 创建流对象;如果文件不存在,自动创建文件</span><br>    <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;src//2.txt&quot;</span>);<br>    <span class="hljs-comment">// 2 写入数据到本地</span><br>    out.write(<span class="hljs-number">118</span>);<br>    out.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;<span class="hljs-number">119</span>&#125;);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;www.baidu.com&quot;</span>;<br>    out.write(content.getBytes(StandardCharsets.UTF_8));<br>    <span class="hljs-comment">// 3 关闭流</span><br>    out.close();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 带缓存的流    BufferedInputStream / BufferedFileOutputStream</span><br><br>    <span class="hljs-comment">// 1 创建对象</span><br>    <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;3.txt&quot;</span>));<br>    <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;4.txt&quot;</span>));<br>    <span class="hljs-comment">// 2 IO流循环读写文件</span><br>    System.out.println(<span class="hljs-string">&quot;=======================&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>((len=is.read()) != -<span class="hljs-number">1</span>)&#123;<br>        os.write(len);<br>    &#125;<br>    <span class="hljs-comment">// 3 关闭流</span><br>    is.close();<br>    os.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="IOUtils工具类"><a href="#IOUtils工具类" class="headerlink" title="IOUtils工具类"></a>IOUtils工具类</h3><h3 id="字符流-Reader-Writer"><a href="#字符流-Reader-Writer" class="headerlink" title="字符流 Reader / Writer"></a>字符流 Reader / Writer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 1 创建对象</span><br>    <span class="hljs-type">Reader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;src/2.txt&quot;</span>);<br>    <span class="hljs-comment">// 2 IO流循环读写文件</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> reader.read();  <span class="hljs-comment">//  每次读取一个字符的数据</span><br>        <span class="hljs-keyword">if</span>(c==-<span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br>        System.out.println((<span class="hljs-type">char</span>)c);<br>    &#125;<br>    <span class="hljs-comment">// 3 流的关闭</span><br>    reader.close();<br><br>    <span class="hljs-comment">// IO流写入数据到文件</span><br>    <span class="hljs-comment">// 创建对象</span><br>    <span class="hljs-type">Writer</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;5.txt&quot;</span>);<br>    out.write(<span class="hljs-string">&#x27;一&#x27;</span>);<br>    out.write(<span class="hljs-string">&#x27;二&#x27;</span>);<br>    <span class="hljs-comment">// 流的关闭</span><br>    out.close();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>带缓存的字符流<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-comment">//1.创建对象</span><br>Reader reader=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;盗墓笔记.txt&quot;</span>));<br><span class="hljs-comment">//2.IO流循环读写文件</span><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br><span class="hljs-type">int</span> c=reader.read(); <span class="hljs-comment">//每次读取一个字符的数据</span><br><span class="hljs-keyword">if</span>(c==-<span class="hljs-number">1</span>) <span class="hljs-keyword">break</span> ;    <span class="hljs-comment">//读取到文件末尾 返回-1</span><br>System.out.print((<span class="hljs-type">char</span>)c);<br>&#125;<br><span class="hljs-comment">//3.流的关闭</span><br>reader.close();<br><br><span class="hljs-comment">//创建对象,如果文件不存在,自动创建</span><br>Writer out=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;out.dat&quot;</span>));<br><span class="hljs-comment">//IO流写入数据到文件</span><br>out.write(<span class="hljs-string">&#x27;我&#x27;</span>); <span class="hljs-comment">//每次写入一个字符的数据</span><br>out.write(<span class="hljs-string">&#x27;爱&#x27;</span>);<br>out.write(<span class="hljs-string">&#x27;你&#x27;</span>);<br>out.write(<span class="hljs-string">&quot;,哈哈哈 是骗你的...&quot;</span>);<br>out.write(<span class="hljs-string">&quot;2022新年快乐&quot;</span>,<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><span class="hljs-comment">//流的关闭</span><br>out.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h3><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p class="note note-primary">单例模式 = [懒汉式单例;饿汉式单例] </br>单例模式特点 = [只能有一个实例;必须自己创建自己唯一的实例(构造器方法私有);单例类必须给所有其他对象体用这一实例(public getInstance方法)]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**单例模式: 懒汉式单例,再第一次调用的时候初始化*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton instance;<br>    <span class="hljs-comment">//1.构造器私有:只有本类才能创建对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;<br>    &#125;<br>    <span class="hljs-comment">//提供public方法让外部获取实例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">instance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(instance==<span class="hljs-literal">null</span>)&#123;<br>            instance=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**单例模式: 饿汉式单例,类加载的时候初始化且只执行一次*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">$Singleton</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> $Singleton instance=<span class="hljs-keyword">new</span> <span class="hljs-title class_">$Singleton</span>();<br>    <span class="hljs-keyword">private</span> $Singleton()&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> $Singleton <span class="hljs-title function_">instance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p class="note note-primary">工厂模式是Java中常用的设计模式之一。</br>在工厂模式中,我们创建对象时不会对客户端暴露创建逻辑,并且时通过使用一个共同的接口指向新创建的对象</p>- 例子: 加载配置文件中的属性,来创建对象**src/test.properties**<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">user</span>=<span class="hljs-string">spring.xxx.pojo.User</span><br><span class="hljs-attr">list</span>=<span class="hljs-string">java.util.ArrayList</span><br><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 专门加载属性文件Properties的工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigUtil</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Properties pro=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    <span class="hljs-comment">//静态代码块,类加载的时候执行,且只执行一次</span><br>    <span class="hljs-keyword">static</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">//类加载方式加载路径:默认加载路径bin(src)</span><br>    pro.load(ConfigUtil.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;test.properties&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**通过key返回value*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getPropertie</span><span class="hljs-params">(String key)</span>&#123;<br>        <span class="hljs-keyword">return</span> (String) pro.get(key);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**工厂模式:创建对象*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Factory</span> &#123;<br>    <span class="hljs-comment">/**创建任何对象*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getInstance</span><span class="hljs-params">(String key)</span>&#123;<br>        Object obj=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//类的路径名:key=&quot;list&quot; value=java.util.ArrayList</span><br>            String className=ConfigUtil.getPropertie(key);<br>            <span class="hljs-comment">//Java反射机制:通过类的路径名,获取字节码对象</span><br>            Class&lt;?&gt; cls = Class.forName(className);<br>            <span class="hljs-comment">//通过字节码对象创建对象:默认调用对象的无参数构造方法</span><br>            obj = cls.newInstance();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 测试类 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFactory</span> &#123;<br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;String&gt; list=(List&lt;String&gt;) Factory.getInstance(<span class="hljs-string">&quot;list&quot;</span>);<br>        System.out.println(list.getClass());<br>        System.out.println(Factory.getInstance(<span class="hljs-string">&quot;user&quot;</span>));<br>        System.out.println(Factory.getInstance(<span class="hljs-string">&quot;driver&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="oop面向对象"><a href="#oop面向对象" class="headerlink" title="oop面向对象"></a>oop面向对象</h1><p class="note note-danger">面向对象==修饰符==接口与抽象类==内部类==异常</p><h2 id="面向对象的基本特征"><a href="#面向对象的基本特征" class="headerlink" title="面向对象的基本特征"></a>面向对象的基本特征</h2><ul><li>抽象 封装 继承 多态</li></ul><p class="note note-primary">抽象: 现实事物对象转变为Java类的过程</p><p class="note note-primary">封装: 把过程和数据包围起来,对数据的访问只能通过已定义的接口访问;封装实际上使用方法将类的数据隐藏起来,控制用户对类的修改和访问数据的程度- 例子:private Integer id; 用private修饰属性</p><p class="note note-primary">继承: extends子类继承父类的所有属性+方法(构造器是不能被继承)</p><p class="note note-primary">多态: 一个事务的多种表现形式</p><h3 id="方法的重写与重载"><a href="#方法的重写与重载" class="headerlink" title="方法的重写与重载"></a>方法的重写与重载</h3><blockquote><p>重写: 发生在子类和父类之间<br>重载: 发生在同一个类里面,方法名相同,参数列表不同</p></blockquote><h2 id="常用修饰符"><a href="#常用修饰符" class="headerlink" title="常用修饰符"></a>常用修饰符</h2><h3 id="访问控制修饰符"><a href="#访问控制修饰符" class="headerlink" title="访问控制修饰符"></a>访问控制修饰符</h3><ul><li>defualt private public protected<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">default</span>  在同一个包内可见.使用对象:类,接口,变量,方法 <br><span class="hljs-keyword">private</span>  在同一类内可见.使用对象:变量,方法。注意:不能修饰类<br><span class="hljs-keyword">public</span>   对所有类可见.使用对象:类,接口,变量,方法<br><span class="hljs-keyword">protected</span>   对同一包内的类和所有子类可见.使用对象: 变量,方法<br></code></pre></td></tr></table></figure></li></ul><h3 id="非访问修饰符"><a href="#非访问修饰符" class="headerlink" title="非访问修饰符"></a>非访问修饰符</h3><ul><li>static final abstract synchronized volatile</li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">static</span>   修饰类方法和类变量<br><span class="hljs-keyword">final</span>    修饰类,方法和变量;<span class="hljs-keyword">final</span>修饰的类不能被继承,修饰的方法不能被继承类重新定义,修饰的变量为常量,不可修改<br><span class="hljs-keyword">abstract</span> 创建抽象类和抽象方法<br><span class="hljs-keyword">synchronized</span>和volatiel 用于线程的编程<br></code></pre></td></tr></table></figure><h2 id="接口与抽象类"><a href="#接口与抽象类" class="headerlink" title="接口与抽象类"></a>接口与抽象类</h2><h3 id="abstract-class-抽象类–不具体的类"><a href="#abstract-class-抽象类–不具体的类" class="headerlink" title="abstract class 抽象类–不具体的类"></a>abstract class 抽象类–不具体的类</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>抽象方法,只有行为的概念,没有具体的行为实现<br><span class="hljs-symbol">2 </span>包含抽象方法的类,一定是抽象类<br><span class="hljs-symbol">3 </span>抽象类不能直接创建实例。可以定义引用变量<br><span class="hljs-symbol">4 </span>抽象类只能被继承,一个具体类继承一个抽象类,必须实现所有抽象方法<br><span class="hljs-symbol">5 </span>抽象方法和抽象类非常适合作为系统的分析和设计的工具<br></code></pre></td></tr></table></figure><h3 id="接口-相当于纯抽象类"><a href="#接口-相当于纯抽象类" class="headerlink" title="接口,相当于纯抽象类"></a>接口,相当于纯抽象类</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>接口: 全部的方法都是抽象方法<br><span class="hljs-symbol">2 </span>不能实例化,可以定义变量<br><span class="hljs-symbol">3 </span>接口变量可以应用具体实现类的实例<br><span class="hljs-symbol">4 </span>接口只能被实现(继承),一个具体类实现接口,必须使用全部的抽象方法<br><span class="hljs-symbol">5 </span>接口之间可以继承<br><span class="hljs-symbol">6 </span>一个具体类可以实现多个接口,实现多继承现象<br><span class="hljs-symbol">7 </span>接口中的属性,默认是 public static final<br><span class="hljs-symbol">8 </span>接口中的方法一定是 public abstract<br><span class="hljs-symbol">9 </span>实现一个接口,使用关键词implements<br></code></pre></td></tr></table></figure><h2 id="四种内部类"><a href="#四种内部类" class="headerlink" title="四种内部类"></a>四种内部类</h2><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p><img src="/img/java/11.1.png"></p><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><p><img src="/img/java/11.2.png"></p><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p><img src="/img/java/11.3.png"></p><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p><img src="/img/java/11.4.png"></p><h2 id="异常机制"><a href="#异常机制" class="headerlink" title="异常机制"></a>异常机制</h2><p><img src="/img/java/11.5.1.png"><br><img src="/img/java/11.5.2.png"></p><h1 id="Java8新特性"><a href="#Java8新特性" class="headerlink" title="Java8新特性"></a>Java8新特性</h1><p class="note note-danger">Lambda表达式==函数式接口==方法引用与构造器引用==Stream API==其他新特性</p><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><blockquote><p>lambda是一个匿名函数;lambda表达式 = 一段可以传递的代码(将代码向数据一样进行传递) –&gt; 更简洁,灵活的代码</p></blockquote><h3 id="从匿名类到Lambda的转换"><a href="#从匿名类到Lambda的转换" class="headerlink" title="从匿名类到Lambda的转换"></a>从匿名类到Lambda的转换</h3><h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><p><a href="https://www.bilibili.com/video/BV1Gh41187uR?spm_id_from=333.337.search-card.all.click&vd_source=2166a36dcade8440c470eb33877cf149">函数式编程</a><br><a href="https://space.bilibili.com/663528522/video">三更</a></p><ul><li><p>为什么要学<br>编程的一种规范 -&gt; 更好的代码可读性 -&gt; 能看懂公司代码 -&gt; 有饭吃😒<br><img src="/img/java/11.6.1.png"></p></li><li><p>概念</p><p class="note note-danger">函数式编程,关注对数据进行了什么操作</br>代码简洁,易于理解,易于并发编程</p></li></ul><h2 id="Lambda表达式-1"><a href="#Lambda表达式-1" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p class="note note-danger">语法糖 -> 简化匿名内部类的写法 -> 函数式编程的重要体现 -> 只关注对数据进行什么操作</br>基本格式：(参数列表) -> {代码} ; 只关注参数列表和方法体</p><ul><li><p>基础demo<br><img src="/img/java/11.6.2.png"><br><img src="/img/java/11.6.3.png"></p></li><li><p>将匿名内部类 自动 替换为lambda表达式<br><img src="/img/java/11.6.4.png"></p></li><li><p>lambda表达式+判断<br><img src="/img/java/11.6.5.png"></p></li><li><p>案例类型转换<br><img src="/img/java/11.6.6.png"></p></li><li><p>案例for-each<br><img src="/img/java/11.6.7.png"></p></li></ul><h3 id="省略规则"><a href="#省略规则" class="headerlink" title="省略规则"></a>省略规则</h3><p>略</p><h2 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h2><p class="note note-danger">java8的Stream使用的是函数式编程模式</br>它可以被用来对集合或数组进行链状流操作</p><h3 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h3><p class="note note-primary">实现功能: 打印所有年龄小于18的作家姓名;需要去重</br>编码逻辑: 获取作家集合(对数据集合进行流操作) == 去重 == 判断年龄 == 遍历打印</p><ul><li>案例的提前准备(获取数据集合:作家集合)<br><img src="/img/java/11.7.1.png"></li><li>对集合做复合操作(去重;判断过滤;遍历打印)<br><img src="/img/java/11.7.2.png"></li></ul><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><p class="note note-danger">创建流 == 中间操作 == 终结操作</br>* 单例集合(Collection): </br>* 双例集合(Map): </p><ul><li>创建流(单列集合;数组;双列集合)</li></ul><p><img src="/img/java/11.7.3.png"></p><h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><p class="note note-danger">filter == map == limit == distinct == sorted ==  skip == flatMap</p>- filter 实现对流中的对象的条件判断![](/img/java/11.7.4.png)<ul><li><p>map<br><img src="/img/java/11.7.5.png"></p></li><li><p>limit<br><img src="/img/java/11.7.6.png"></p></li><li><p>distinct 功能就是去重<br>distinct 方法依赖Object的equals方法来判断是否是相同对象的。所有需要注意重写equals方法</p></li><li><p>sorted<br><img src="/img/java/11.7.7.png"></p></li><li><p>skip<br><img src="/img/java/11.7.8.png"></p></li><li><p>flatMap: 转换流,将原本流对象 拆成多个对象 作为新的流元素<br><img src="/img/java/11.7.9.png"><br><img src="/img/java/11.7.10.png"></p></li></ul><h3 id="终结操作"><a href="#终结操作" class="headerlink" title="终结操作"></a>终结操作</h3><p class="note note-danger">forEach == count == max&min == collect == 查找与匹配 == reduce归并</p><ul><li><p>forEach</p></li><li><p>count 可以用雷获取当前流中元素的个数<br><img src="/img/java/11.8.2.png"></p></li><li><p>max&amp;min<br><img src="/img/java/11.8.1.png"></p></li><li><p>collect: 把当前流转换为一个集合<br><img src="/img/java/11.8.3.png"></p></li></ul><h4 id="查找与匹配"><a href="#查找与匹配" class="headerlink" title="查找与匹配"></a>查找与匹配</h4><p class="note note-danger">anyMatch == allMatch == noneMatch == findAny == findFirst</p>- anyMatch![](/img/java/11.8.4.png)<ul><li><p>allMatch<br><img src="/img/java/11.8.5.png"></p></li><li><p>noneMatch<br><img src="/img/java/11.8.6.png"></p></li><li><p>findAny<br><img src="/img/java/11.8.7.png"></p></li><li><p>findFirst<br><img src="/img/java/11.8.8.png"></p></li></ul><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><p><img src="/img/java/11.8.9.png"><br><img src="/img/java/11.8.10.png"></p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p class="note note-danger">1 惰性求值(如果没有终结操作;没有中间操作时不会得到执行的)</br>2 流是一次性的(一旦一个流对象经过一个终结操作后。这个流就不饿能再被使用)</br>3 不会影响原数据(我们再流中可以多数据做很多处理.但是正常情况下时不会影响原来集合中的元素)</p><h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><h3 id="Optional-概述"><a href="#Optional-概述" class="headerlink" title="Optional 概述"></a>Optional 概述</h3><p class="note note-danger">Optional可以避免空指针异常</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li><p>创建对象<br><img src="/img/java/11.9.1.png"></p></li><li><p>安全消费<br><img src="/img/java/11.9.2.png"></p></li><li><p>过滤<br><img src="/img/java/11.9.3.png"></p></li><li><p>判断<br><img src="/img/java/11.9.4.png"></p></li><li><p>数据转换<br><img src="/img/java/11.9.5.png"></p></li></ul><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p class="note note-danger">函数接口 = 只有一个抽象方法的接口</p><h3 id="常用的函数接口"><a href="#常用的函数接口" class="headerlink" title="常用的函数接口"></a>常用的函数接口</h3><h3 id="常用的默认方法"><a href="#常用的默认方法" class="headerlink" title="常用的默认方法"></a>常用的默认方法</h3><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>

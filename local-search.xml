<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>spring</title>
    <link href="/2022/06/13/spring-1/"/>
    <url>/2022/06/13/spring-1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>java核心卷1</title>
    <link href="/2022/06/11/java%E6%A0%B8%E5%BF%83%E5%8D%B71/"/>
    <url>/2022/06/11/java%E6%A0%B8%E5%BF%83%E5%8D%B71/</url>
    
    <content type="html"><![CDATA[<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>1 编译与运行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 编译一个java文件,一个java文件可包含多个类<br>javac 源文件名字.java<br><br><span class="hljs-regexp">//</span> 运行字节码文件<br>java 类名       <span class="hljs-regexp">//</span>运行类中的main方法<br></code></pre></td></tr></table></figure><p>2 编译多个源文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 匹配编译多个以Employee为前缀的java文件<br>javac Employee*.java<br></code></pre></td></tr></table></figure><h1 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h1><h2 id="面向对象程序设计概述"><a href="#面向对象程序设计概述" class="headerlink" title="面向对象程序设计概述"></a>面向对象程序设计概述</h2><p>1 oop面向对象程序设计，是由对象组成的；每个对象包含对用户公开的特定功能部分和隐藏的实现部分；在oop中，不必惯性对象的具体实现；面向对象用于解决规模更大的问题</p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>1 类是构造对象的模板或蓝图。<br>2 封装,将数据和行为组合在一个包，并对对象的使用者隐藏了数据的实现方式;实现封装的关键在于绝对不能让类中的方法直接地访问其他类的实例域<br>3 继承,通过扩展一个类来建立另外一个新的类;扩展后新的类具有所扩展的类的全部属性和方法</p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>要想使用oop,要清楚对象的三大主要特性:行为;状态;标识<br>关键特性之间相互影响。[订单：状态是已送货或已付款，则拒绝调用增删订单中条目的方法。状态是空,则不能进入”已送货”状态]</p><h3 id="识别类"><a href="#识别类" class="headerlink" title="识别类"></a>识别类</h3><p>oop首先从设计类开始，然后往类中添加方法。<br>原则：找名词和找动词</p><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><p>关系：依赖，聚合，继承<br>1 依赖,是use-a的关系;[例子:Oder类使用Account类对象查看信用状态]<br>2 集合,是has-a的关系;[例子:Oder类包含多个item对象]<br>3 继承,是is-a的关系;[例子:RushOrder继承了父类Order]</p><h2 id="使用预定义类"><a href="#使用预定义类" class="headerlink" title="使用预定义类"></a>使用预定义类</h2><p>在java中,</p><h3 id="对象与对象变量"><a href="#对象与对象变量" class="headerlink" title="对象与对象变量"></a>对象与对象变量</h3><p>使用对象： 构造对象–指定其初始状态–对对象应用方法<br>1 使用构造器–》构造新实例<br>2 对象变量仅仅是引用一个对象</p><h3 id="用户自定义类"><a href="#用户自定义类" class="headerlink" title="用户自定义类"></a>用户自定义类</h3><ul><li>基本语法</li></ul><h3 id="隐式参数与显式参数"><a href="#隐式参数与显式参数" class="headerlink" title="隐式参数与显式参数"></a>隐式参数与显式参数</h3><p>1 隐式参数：类属性+this<br>2 显式参数：方法形参中出现的参数</p><h3 id="封装的优点"><a href="#封装的优点" class="headerlink" title="封装的优点"></a>封装的优点</h3><p>1 实现对数据域的保护《==一些数据域指定为private</p><ul><li>获取或设置实例域的值<br>1 一个私有的数据域<br>2 一个公有的域访问器方法<br>3 一个公有的域更改器方法(此方法可以同时进行检查字段)</li></ul><p>如果需要返回可变数据域的拷贝，就应该使用clone</p><h3 id="基于类的访问权限"><a href="#基于类的访问权限" class="headerlink" title="基于类的访问权限"></a>基于类的访问权限</h3><p>一个类的方法可以访问 所属类所有对象实例的私有数据</p><h3 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h3><p>1 实现一个类时，公有数据是非常危险的，应当将所有数据域都设置为私有的。<br>2 一些方法不能被公开访问，则定义为私有的private;好处是【不会被外部类所依赖,方便修改】</p><h3 id="final实例域"><a href="#final实例域" class="headerlink" title="final实例域"></a>final实例域</h3><p>可以将实例域定义为final;这样构建对象时，必须初始化这样的域;</p><h2 id="静态域域静态方法"><a href="#静态域域静态方法" class="headerlink" title="静态域域静态方法"></a>静态域域静态方法</h2><p>将域定义为static,每个类中只有一个这样的域;所有实例域都具有自己的一份备份,但是对于自己的静态域来说所有实例将共享静态域</p><h3 id="静态常量"><a href="#静态常量" class="headerlink" title="静态常量"></a>静态常量</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-literal">PI</span> = <span class="hljs-number">3.14</span>;<br></code></pre></td></tr></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>静态方法时一种不能对对象实例实施操作的方法。也就是没有隐式的参数。</p><p>下面两种情况下使用静态方法<br>1 一个方法不需要访问对象状态，其参数都是通过显示参数提供<br>2 一个方法只需要访问类的静态域</p><h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><p>静态方法还有个常见的用途：使用静态工厂方法来构造对象。</p><h2 id="方法参数"><a href="#方法参数" class="headerlink" title="方法参数"></a>方法参数</h2><p>按值调用<br>按引用调用<br>1 java总是采用按值调用，方法得到的是所有参数值的一个拷贝。<br>2 而对象引用作为参数则不同；对象引用作为参数并在函数中进行调用会修改本来的值;对引用的拷贝会指向同一个对象<br>3 对象采用的不是引用调用，实际上，对象引用是按值传递</p><h2 id="对象构造"><a href="#对象构造" class="headerlink" title="对象构造"></a>对象构造</h2><p>介绍多种编写构造器的机制。</p><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>重载：相同的方法名,不同的形参</p><h3 id="默认域初始化"><a href="#默认域初始化" class="headerlink" title="默认域初始化"></a>默认域初始化</h3><p>构造器中没有显式地给域赋予初值，那么就会被自动地赋为默认值</p><h3 id="无参数的构造器"><a href="#无参数的构造器" class="headerlink" title="无参数的构造器"></a>无参数的构造器</h3><p>无参数的构造器会自动将其状态设置为合适的默认值</p><h3 id="显式域初始化"><a href="#显式域初始化" class="headerlink" title="显式域初始化"></a>显式域初始化</h3><p>显式对域赋值</p><h3 id="参数名"><a href="#参数名" class="headerlink" title="参数名"></a>参数名</h3><p>构造函数中使用this赋值</p><h3 id="调用另一个构造器"><a href="#调用另一个构造器" class="headerlink" title="调用另一个构造器"></a>调用另一个构造器</h3><p>使用this()这个构造方法</p><h3 id="初始化块"><a href="#初始化块" class="headerlink" title="初始化块"></a>初始化块</h3><p>1 初始化包含三种方式[ 构造器中赋值;声明时赋值;初始化块赋值 ]<br>2 首先运行初始化块,然后才运行构造器的主体部分</p><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>使用包可以确保类名的唯一性;不会产生冲突</p><h3 id="类的导入"><a href="#类的导入" class="headerlink" title="类的导入"></a>类的导入</h3><p>import 导入整个包或特定的类</p><h3 id="包作用域"><a href="#包作用域" class="headerlink" title="包作用域"></a>包作用域</h3><p>标记为public的部分可以被任意的类使用;<br>标记为private的部分只能被定义它们的类使用;<br>没有指定的为default,可以被同一个包的所有方法访问;</p><h2 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h2><h3 id="注释的插入"><a href="#注释的插入" class="headerlink" title="注释的插入"></a>注释的插入</h3><p>/**<br>概述性信息<br>…其他注释<br>*/</p><h3 id="类注释"><a href="#类注释" class="headerlink" title="类注释"></a>类注释</h3><p>类注释必须放在import语句之后,类定义之前</p><h3 id="方法注释"><a href="#方法注释" class="headerlink" title="方法注释"></a>方法注释</h3><p>常用标记<br>@param变量描述<br>@return描述<br>@throws描述</p><h3 id="域注释"><a href="#域注释" class="headerlink" title="域注释"></a>域注释</h3><p>只需要对公有域建立文档</p><h2 id="类设计技巧"><a href="#类设计技巧" class="headerlink" title="类设计技巧"></a>类设计技巧</h2><p>1 一定要保证数据私有<br>2 一定要对数据初始化<br>3 不要再类中使用过多的基本类型<br>4 不是所有的域都需要独立的域访问器和域更改器<br>5 将职责过多的类进行分解<br>6 类名和方法名要能够体现它们的职责<br>7 优先使用不可变的类</p><h1 id="第五章-继承"><a href="#第五章-继承" class="headerlink" title="第五章 继承"></a>第五章 继承</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>spring</title>
    <link href="/2022/06/07/spring/"/>
    <url>/2022/06/07/spring/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.bilibili.com/video/BV1Vf4y127N5?vd_source=79b4294ba1b51b78d8501db87f35d73d">https://www.bilibili.com/video/BV1Vf4y127N5?vd_source=79b4294ba1b51b78d8501db87f35d73d</a></p></blockquote><h1 id="0-概述"><a href="#0-概述" class="headerlink" title="0 概述"></a>0 概述</h1><ul><li><p>课程内容介绍</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>Spring框架概述<br><span class="hljs-symbol">2 </span>IOC容器<br><span class="hljs-symbol">3 </span>Aop<br><span class="hljs-symbol">4 </span>JdbcTemplate<br><span class="hljs-symbol">5 </span>事务管理<br><span class="hljs-symbol">6 </span>Spring5新特性<br></code></pre></td></tr></table></figure></li><li><p>Spring框架概述<br>1 spring是轻量级的开源的javaee框架<br>2 spring可以解决企业应用开发的复杂性<br>3 spring有两个核心部分 IOC和Aop<br>  3.1 IOC: 控制反转,把创建对象过程交给Spring进行管理<br>  3.2 Aop: 面向切面,不修改源代码进行功能增强<br>4 spring框架的特点<br>  4.1 方便解耦,简化开发<br>  4.2 Aop的支持<br>  4.3 方便程序测试<br>  4.4 方便和其他框架进行整合<br>  4.5 方便进行事务操作<br>  4.6 降低API使用难度</p></li><li><p>入门ioc demo<br>1 spring5 jar包下载<br>  1.1 配置maven环境</p></li></ul><p>2 idea创建java工程<br>    2.1 创建java webapp项目<br>    2.2 pom.xml引入对应jar包的坐标</p><p>3 ioc<br>    3.1 创建配置文件 application.xml<br>    3.2 写入相应的约束,配置相应的bean<br>    3.3 主类 读取配置文件–通过getBean()方法获取对象–调用获取的对象</p><ul><li>总结<br>  1编写bean的配置文件与相应的bean配置 – 读取配置文件并调用<br>  2 特点:ioc;对象的创建交给容器</li></ul><p>1 pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pro11<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>pro11 Maven Webapp<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://www.example.com<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--  此处引入坐标添加依赖  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.testng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>testng<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-nop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>pro11<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span><span class="hljs-comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-clean-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.22.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-war-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-install-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2 application.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.middlename.pojo.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3 读取配置文件并调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.middlename.test;<br><br><br><span class="hljs-keyword">import</span> com.middlename.pojo.User;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAdd</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 1 加载spring配置文件</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;application.xml&quot;</span>);<span class="hljs-comment">// application 放在 resources目录下</span><br>        <span class="hljs-comment">// 2 获取配置创建的对象</span><br>       <span class="hljs-type">User</span> <span class="hljs-variable">user</span>  <span class="hljs-operator">=</span>  (User)context.getBean(<span class="hljs-string">&quot;user&quot;</span>);<br>       <span class="hljs-comment">// 3 调用</span><br>        user.add();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        testAdd();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h2><ul><li>概述<br>1 ioc底层原理<br>2 ioc接口(BeanFactory)<br>3 ioc操作bean管理(基于xml)<br>4 ioc操作bean管理(基于注解)</li></ul><h3 id="概念与原理"><a href="#概念与原理" class="headerlink" title="概念与原理"></a>概念与原理</h3><p>1 什么是ioc<br>    1.1 控制反转,把对象创建和对象之间的调用过程,交给Spring进行管理<br>    1.2 使用ioc目的：为了耦合度降低</p><p>2 ioc底层原理<br>    2.1 xml解析;工程模式;反射<br>    2.2 ioc原理</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">String classValue = <span class="hljs-keyword">class</span>属性值;<br>Class clazz = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-params">classValue</span>)</span>;<br>return (BeanType)clazz.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>;<br></code></pre></td></tr></table></figure><h3 id="ioc接口"><a href="#ioc接口" class="headerlink" title="ioc接口"></a>ioc接口</h3><p>1 ioc思想基于ioc容器完成;ioc容器底层就是对象工厂<br>2 Spring提供ioc容器实现两种方式:(两个接口)<br>    2.1 BeanFactory:IOC容器基本实现,是Spring内部的使用接口;不提供开发人员使用<br>    2.2 ApplicationContext:BeanFactory接口的子接口,提供更多功能;推荐这个<br>3 Application接口有实现类</p><p>ioc主要基于两个接口实现的 BeanFactory,ApplicationContext<br><img src="/img/spring/1.1.png" alt="ioc两个接口"></p><h3 id="ioc管理bean"><a href="#ioc管理bean" class="headerlink" title="ioc管理bean"></a>ioc管理bean</h3><p>0 bean管理指的是两个操作<br>    0.1 Spring创建对象<br>    0.2 Spring注入属性<br>1 方式<br>    1.1 基于xml配置文件方式实现<br>    1.2 基于注释方式实现</p><h3 id="ioc操作bean-基于xml"><a href="#ioc操作bean-基于xml" class="headerlink" title="ioc操作bean(基于xml)"></a>ioc操作bean(基于xml)</h3><p>1 基于xml创建对象<br>    1.1 在spring配置文件中，使用bean标签;标签里面添加对应属性,实现对象创建<br>    1.2 在bean标签中标签有很多属性<br>        id属性：标识主键<br>        class属性：类全路径<br>    1.3 创建对象时候，默认也是执行无参数构造方法完成对象创建</p><p>2 基于xml方式注入属性<br>    2.1 DI：依赖注入,就是注入属性</p><p>第一种注入方式:使用set方法进行注入<br>1 pojo类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">middlename</span>.<span class="hljs-property">pojo</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> bname;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> author;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getBname</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> bname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getAuthor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> author;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setBname</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> bname</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">bname</span> = bname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setAuthor</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> author</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">author</span> = author;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Book&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;bname=&#x27;&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">bname</span> + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, author=&#x27;&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">author</span> + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">testdemo</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">bname</span>);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">author</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2 编写bean的配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/context/spring-context-4.2.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/aop/spring-aop-4.2.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.middlename.pojo.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.middlename.pojo.Book&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--   使用property标签进入注入属性     --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;bnamevalue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;authorname&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3 调用</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAdd</span>()</span>&#123;<br>    <span class="hljs-comment">// 1 加载spring配置文件</span><br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;application.xml&quot;</span>);<span class="hljs-comment">// application 放在 resources目录下</span><br>    <span class="hljs-comment">// 2 获取配置创建的对象</span><br>   Book temp  =  (Book)context.getBean(<span class="hljs-string">&quot;book&quot;</span>);<br>   <span class="hljs-comment">// 3 调用</span><br>    System.<span class="hljs-keyword">out</span>.println(temp.toString());<br>&#125;<br></code></pre></td></tr></table></figure><p>第二种注入方式：使用有参数构造进行注入<br>1 pojo类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">middlename</span>.<span class="hljs-property">pojo</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> oname;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> address;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Order</span>(<span class="hljs-title class_">String</span> oname,<span class="hljs-title class_">String</span> address)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">oname</span> = oname;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">address</span> = address;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Order&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;oname=&#x27;&quot;</span> + oname + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, address=&#x27;&quot;</span> + address + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2 bean的配置文件</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;bean id<span class="hljs-operator">=</span><span class="hljs-string">&quot;order&quot;</span> class<span class="hljs-operator">=</span><span class="hljs-string">&quot;com.middlename.pojo.Order&quot;</span>&gt;<br>    &lt;constructor-arg name<span class="hljs-operator">=</span><span class="hljs-string">&quot;oname&quot;</span> value<span class="hljs-operator">=</span><span class="hljs-string">&quot;index1_value&quot;</span>&gt;&lt;/constructor-arg&gt;<br>    &lt;constructor-arg name<span class="hljs-operator">=</span><span class="hljs-string">&quot;address&quot;</span> value<span class="hljs-operator">=</span><span class="hljs-string">&quot;address_value&quot;</span>&gt;&lt;/constructor-arg&gt;<br>&lt;/bean&gt;<br></code></pre></td></tr></table></figure><ul><li>注入其他类型属性<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml">value填写null<br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bname&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">null</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>2 属性包含特殊字符  使用value标签并指定CDATA<br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bname&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span><br>                &lt;![CDATA[&lt;&lt;南京&gt;&gt;]]]&gt;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="注入属性-外部bean"><a href="#注入属性-外部bean" class="headerlink" title="注入属性-外部bean"></a>注入属性-外部bean</h4><p>1 创建两个类service类和dao类<br>2 在service调用dao里面的方法;service包含一个dao对象</p><p>application.xml 编写bean标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.middlename.service.UserService&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--   通过ref指定要注入的bean     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userdao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDaoImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.middlename.dao.UserDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="注入属性-内部bean和级联赋值"><a href="#注入属性-内部bean和级联赋值" class="headerlink" title="注入属性-内部bean和级联赋值"></a>注入属性-内部bean和级联赋值</h4><p>1 一对多关系:部门和员工;一个部门有多个员工,一个员工属于一个部门</p><p>1.1 表示一个员工有一个部门<br>Emp类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">middlename</span>.<span class="hljs-property">pojo</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> Emp类：员工类,一个员工属于一个部门</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Emp</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> ename;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> gender;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Dept</span> dept;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setDept</span>(<span class="hljs-params">Dept dept</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">dept</span> = dept;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setEname</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> ename</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">ename</span> = ename;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setGender</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> gender</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">gender</span> = gender;<br>    &#125;<br><br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Emp&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;ename=&#x27;&quot;</span> + ename + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, dept=&quot;</span> + dept +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">testadd</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">toString</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1 内部bean注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.middlename.pojo.Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ename&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;tom&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dept&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.middlename.pojo.Dept&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;d1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2 注入属性-级联赋值</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;bean id<span class="hljs-operator">=</span><span class="hljs-string">&quot;emp&quot;</span> class<span class="hljs-operator">=</span><span class="hljs-string">&quot;com.middlename.pojo.Emp&quot;</span>&gt;<br>    &lt;property name<span class="hljs-operator">=</span><span class="hljs-string">&quot;ename&quot;</span> value<span class="hljs-operator">=</span><span class="hljs-string">&quot;tom&quot;</span>&gt;&lt;/property&gt;<br>    &lt;property name<span class="hljs-operator">=</span><span class="hljs-string">&quot;gender&quot;</span> value<span class="hljs-operator">=</span><span class="hljs-string">&quot;female&quot;</span>&gt;&lt;/property&gt;<br>    &lt;property name<span class="hljs-operator">=</span><span class="hljs-string">&quot;dept&quot;</span> ref<span class="hljs-operator">=</span><span class="hljs-string">&quot;dept&quot;</span>&gt;&lt;/property&gt;<br>&lt;/bean&gt;<br><br>    &lt;bean id<span class="hljs-operator">=</span><span class="hljs-string">&quot;dept&quot;</span> class<span class="hljs-operator">=</span><span class="hljs-string">&quot;com.middlename.pojo.Dept&quot;</span>&gt;<br>        &lt;property name<span class="hljs-operator">=</span><span class="hljs-string">&quot;dname&quot;</span> value<span class="hljs-operator">=</span><span class="hljs-string">&quot;123&quot;</span>&gt;&lt;/property&gt;<br>    &lt;/bean&gt;<br></code></pre></td></tr></table></figure><h4 id="ioc操作bean管理-xml注入集合属性"><a href="#ioc操作bean管理-xml注入集合属性" class="headerlink" title="ioc操作bean管理(xml注入集合属性)"></a>ioc操作bean管理(xml注入集合属性)</h4><p>1 注入数组类型属性<br>2 注入List集合类型属性<br>3 注入Map集合类型属性<br>4 注入set集合类型属性</p><p>Stu 类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">middlename</span>.<span class="hljs-property">pojo</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Arrays</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">List</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Map</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">util</span>.<span class="hljs-property">Set</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Stu</span> &#123;<br>    <span class="hljs-comment">// 1 数组类型属性</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span>[] course;<br>    <span class="hljs-comment">// 2 list集合类型属性</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">String</span>&gt; list;<br>    <span class="hljs-comment">// 3 map集合类型属性</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Map</span>&lt;<span class="hljs-title class_">String</span>,<span class="hljs-title class_">String</span>&gt; maps;<br>    <span class="hljs-comment">// 4 set集合类型属性</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">Set</span>&lt;<span class="hljs-title class_">String</span>&gt; sets;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setSets</span>(<span class="hljs-params"><span class="hljs-built_in">Set</span>&lt;<span class="hljs-built_in">String</span>&gt; sets</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">sets</span> = sets;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setCourse</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] course</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">course</span> = course;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setList</span>(<span class="hljs-params">List&lt;<span class="hljs-built_in">String</span>&gt; list</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span> = list;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setMaps</span>(<span class="hljs-params"><span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt; maps</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">maps</span> = maps;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-title class_">Arrays</span>.<span class="hljs-title function_">toString</span>(course));<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(list);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(maps);<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(sets);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>普通类型集合类注入的application.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.middlename.pojo.Stu&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;course&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Java<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>C++<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Golang<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>tom<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bob<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>jerry<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maps&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;JAVA&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;java&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;C++&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;c++&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sets&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Mysql<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>Redis<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>对象类型集合类注入,application.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;course1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.middlename.pojo.Course&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;course2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.middlename.pojo.Course&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;456&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.middlename.pojo.Stu&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--   注入对象集合     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;courselist&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;course1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;course2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="ioc操作bean管理-FactoryBean"><a href="#ioc操作bean管理-FactoryBean" class="headerlink" title="ioc操作bean管理(FactoryBean)"></a>ioc操作bean管理(FactoryBean)</h4><p>1 Spring 有两个类型bean,一个普通bean,另一个工厂bean(FactoryBean)<br>普通bean: 在配置文件中定义bean类型就是返回类型<br>工厂bean: 在配置文件中定义bean类型可以和返回类型不一样</p><p>定义类型和返回类型不一样;是工厂模式的一个体现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs typescript">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">testAdd</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">ApplicationContext</span> context = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;application.xml&quot;</span>);<span class="hljs-comment">// application 放在 resources目录下</span><br>        <span class="hljs-title class_">Course</span> temp  =  (<span class="hljs-title class_">Course</span>)context.<span class="hljs-title function_">getBean</span>(<span class="hljs-string">&quot;mybean&quot;</span>);<br>        temp.<span class="hljs-title function_">test</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Course</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> cname;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setCname</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> cname</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">cname</span> = cname;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Course&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;cname=&#x27;&quot;</span> + cname + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">toString</span>());<br>    &#125;<br>&#125;<br><br>    &lt;bean id=<span class="hljs-string">&quot;mybean&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;com.middlename.pojo.MyBean&quot;</span>&gt;&lt;/bean&gt;<br></code></pre></td></tr></table></figure><h4 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h4><p>1 在Spring里面,设置创建bean实例是单实例还是多实例<br>2 在Spring里面,默认情况下,bean是个单实例<br>3 设置单实例还是多实例<br>    使用bean标签中的scope属性值;singleton表示是单实例对象/prototype表示的是多实例对象</p><ul><li>singleton和prototype的区别<br>第一 singleton单实例,prototype多实例<br>第二 设置scope值是singleton时候,加载spring配置文件时候就会创建单例对象<br>   设置scope值是prototype时候,不是在加载spring配置文件时候创建对象，而是在调用getBean方法时候创建多实例对象</li></ul><h4 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h4><p>1 生命周期<br>    1.1 从对象创建到对象销毁的过程</p><p>2 bean生命周期<br>    2.1 通过构造器创建bean实例(无参数构造)<br>    2.2 为bean注入属性(调用set方法)<br>    2.3 调用bean的初始化方法(需要进行配置初始化的方法)<br>    2.4 bean可以使用了(对象获取到了)<br>    2.5 当容器关闭时，调用bean的调回的方法(需要配置销毁的方法)</p><h4 id="xml自动装配"><a href="#xml自动装配" class="headerlink" title="xml自动装配"></a>xml自动装配</h4><p>手动装配 :根据bean里指定的规则,进行装配<br>自动装配 :bean标签中有个autowire属性值<br>    byname  根据属性名注入,注入值bean的id值和类属性名称一样<br>    byType   根据属性类型注入</p><h4 id="ioc操作bean管理-外部属性文件"><a href="#ioc操作bean管理-外部属性文件" class="headerlink" title="ioc操作bean管理(外部属性文件)"></a>ioc操作bean管理(外部属性文件)</h4><p>1 直接配置数据库信息<br>1.1 配置德鲁伊连接池的依赖包,引入maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>1.2 配置数据库连接池的bean,引入外部属性文件(记录了数据库的基本设置)</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-comment">&lt;!--  引入外部属性文件  --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;jdbd.properties&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--  配置连接池  --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;prop.driverClass&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;prop.url&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;prop.userName&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$</span></span></span><span class="hljs-template-variable">&#123;prop.password&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="ioc操作bean-基于注释"><a href="#ioc操作bean-基于注释" class="headerlink" title="ioc操作bean(基于注释)"></a>ioc操作bean(基于注释)</h3><p>1 什么是注解<br>    注解是代码特殊标记,格式:@注解名称(属性名称=属性值,属性名称=属性值..)<br>    使用注解,注解作用域类,方法,属性<br>    使用注解目的:简化xml配置</p><p>2 Spring针对Bean管理中创建对象提供注解<br>    @Component<br>    @Service<br>    @Controller<br>    @Repository<br>*上面四个注解功能是一样的,用来创建bean实例</p><h4 id="基于注解创建对象"><a href="#基于注解创建对象" class="headerlink" title="基于注解创建对象"></a>基于注解创建对象</h4><p>1 引入aop的jar包,maven指定了坐标应该不用<br>2 使用注解创建对象<br>    2.1 在bean的配置文件中开启包扫描</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/context/spring-context-4.2.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/aop/spring-aop-4.2.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 开启组件扫描</span><br><span class="hljs-comment">       1 如果扫描多个包,多个包使用都好隔开</span><br><span class="hljs-comment">       2 扫描包的上层目录</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.middlename&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br><br></code></pre></td></tr></table></figure><pre><code class="hljs">2.2 在对应的类上打上bean的注解</code></pre><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 默认是类名,首字母小写</span><br>@Component(<span class="hljs-keyword">value</span>=<span class="hljs-string">&quot;userService&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;something data infomation&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="包扫描的配置"><a href="#包扫描的配置" class="headerlink" title="包扫描的配置"></a>包扫描的配置</h4><p>开启指定扫描哪些包<br>开启不扫描哪些包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--   指定扫描以下包     --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.middlename&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--   不去扫描以下包     --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.middlename&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="注入属性"><a href="#注入属性" class="headerlink" title="注入属性"></a>注入属性</h4><p>1 @Autowired：根据属性类型进行自动装配<br>2 @Qualifier：根据属性名称进行注入<br>3 @Resource：根据类型注入,也根据名称注入<br>4 @Value： 注入普通类型属性</p><ul><li>示例 UserService注入UserDao<br>1 @Autowired 注入<br>UserDao的注释<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.middlename.dao;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-meta">@Repository</span>(value = <span class="hljs-string">&quot;userDaoImpl&quot;</span>)  <span class="hljs-comment">// 不加value默认bean id 为 首字母小写的类名</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;update() in UserDao is called&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>UserService类的注释<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.middlename.service;<br><br><span class="hljs-keyword">import</span> com.middlename.dao.UserDao;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.<span class="hljs-keyword">annotation</span>.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.<span class="hljs-keyword">annotation</span>.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component(value=<span class="hljs-string">&quot;userService&quot;</span>)</span><span class="hljs-comment">// 不加value,默认是类名,首字母小写</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span>      <span class="hljs-comment">// 根据类型注入</span><br>    <span class="hljs-keyword">public</span> UserDao userdao;<br><br>    <span class="hljs-keyword">public</span> void test()&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;test() in UserService is called &quot;</span>);<br>        userdao.update();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>2 @Qualifier注入,由于一个接口可以有多个实现类,所以可以用指定名称<br>UserService类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.middlename.service;<br><br><span class="hljs-keyword">import</span> com.middlename.dao.UserDao;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.<span class="hljs-keyword">annotation</span>.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.<span class="hljs-keyword">annotation</span>.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">// 默认是类名,首字母小写</span><br><span class="hljs-meta">@Component(value=<span class="hljs-string">&quot;userService&quot;</span>)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-meta">@Qualifier(value = <span class="hljs-string">&quot;userDaoImpl&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> UserDao userdao;<br><br>    <span class="hljs-keyword">public</span> void test()&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;test() in UserService is called &quot;</span>);<br>        userdao.update();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3 @Recource注入,包含前两种,既可以按类型,又可以按名称<br>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.annotation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.annotation-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>UserService类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 默认是类名,首字母小写</span><br><span class="hljs-meta">@Component(value=&quot;userService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-comment">// @Resource</span><br>    <span class="hljs-meta">@Resource(name = &quot;userDaoImpl&quot;)</span><br>    <span class="hljs-keyword">private</span> UserDao userdao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;test() in UserService is called &quot;</span>);<br>        userdao.update();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4@Value注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value(value = &quot;123&quot;)</span><br><span class="hljs-keyword">private</span> String name;<br></code></pre></td></tr></table></figure><h4 id="完全注解开发"><a href="#完全注解开发" class="headerlink" title="完全注解开发"></a>完全注解开发</h4><p>1 创建配置类 ==&gt;替代xml配置文件<br>2 在测试类中,更改加载配置文件的代码==》加载配置类的代码</p><p>1.1 java目录下创建config目录,并创建SpringConfig类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.middlename.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.ComponentScan;<br><span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(basePackages = &#123;<span class="hljs-string">&quot;com.middlename&quot;</span>&#125;)</span>   <span class="hljs-comment">//开启包扫描</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringConfig</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>1.2 测试类加载配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 加载配置类</span><br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br><span class="hljs-type">UserService</span> <span class="hljs-variable">temp</span>  <span class="hljs-operator">=</span>  (UserService)context.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>temp.test();<br></code></pre></td></tr></table></figure><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>1 aop(概念)<br>    1.1 面向切面编程,将业务逻辑部分代码进行分离;<br>    1.2 不通过修改源代码方式,在主干功能里面添加新功能</p><h4 id="aop底层原理"><a href="#aop底层原理" class="headerlink" title="aop底层原理"></a>aop底层原理</h4><p>1 AOP底层使用动态代理<br>    1.1 有两种情况动态代理<br>    第一种 有接口情况,使用JDK动态代理<br>    创建接口实现类代理对象,增强类的方法</p><pre><code class="hljs">第二种 没有接口,使用CGLIB动态代理CGLIB动态代理：创建当前子类的代理对象 </code></pre><h4 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h4><ul><li>参考资料<br><a href="https://juejin.cn/post/7098269942310502437">https://juejin.cn/post/7098269942310502437</a></li></ul><h4 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h4><p>参考资料<a href="https://juejin.cn/post/7094835741749936159">https://juejin.cn/post/7094835741749936159</a><br>1 静态代理<br>创建一个接口;创建一个实现类,实现这个接口;创建一个代理类,实现这个接口并包含一个实现类的实例,在对应方法调用这个实例的方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span>()</span>;<br>&#125;<br><span class="hljs-comment">// 具体实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-title">implements</span> <span class="hljs-title">UserDao</span> &#123;<br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;save() in the UserDaoImpl is called&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 代理类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoProxy</span> <span class="hljs-title">implements</span> <span class="hljs-title">UserDao</span>&#123;<br>    <span class="hljs-keyword">private</span> UserDao userdao;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserDaoProxy</span>(<span class="hljs-params">UserDao userdao</span>)</span> &#123;<br>        <span class="hljs-keyword">this</span>.userdao = userdao;<br>    &#125;<br><br>    @Override<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span>()</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;before save()&quot;</span>);<br>        userdao.save();<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;after save()&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 主类调用</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;<br>        UserDaoImpl userdao = <span class="hljs-keyword">new</span> UserDaoImpl();<br>        UserDaoProxy proxy = <span class="hljs-keyword">new</span> UserDaoProxy(userdao);<br>        proxy.save();<br>    &#125;<br></code></pre></td></tr></table></figure><p>2 jdk 动态代理<br>    2.1 通过实现InvocationHandler接口来定义自己的InvocationHandler<br>    2.2 通过Proxy.getProxyClass获得动态代理类<br>    2.3 通过反射机制获取代理类的构造方法,方法签名为getonstructor(InvocationHandler.class)<br>    2.4 通过构造函数获取代理对象并将自定义的InvocationHandler实例对象作为参数传入<br>    2.5 通过代理对象调用目标方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Hello</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 代理类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-keyword">private</span> Object target;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyInvocationHandler</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;before target code is called &quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> method.invoke(target,args);<br>        System.out.println(<span class="hljs-string">&quot;after target code is called&quot;</span>);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Hello</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> (Hello)Proxy.newProxyInstance(Hello.class.getClassLoader()<br>                ,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Hello.class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInvocationHandler</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloImpl</span>()));<br>        hello.say();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>动态代理中,核心是InvocationHandler。对代理对象实例方法的调用都是通过InvocationHandler中的invoke方法完成;而invoke方法会根据传入的代理对象,方法名称以及参数决定调用代理的哪个方法</p><h4 id="jdk动态代理"><a href="#jdk动态代理" class="headerlink" title="jdk动态代理"></a>jdk动态代理</h4><p>代理类实例有    Proxy.newProxyInstance()得到<br>对于代理类进行调用的主要是 InvocationHandler.invoke()</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> JDKProxy &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br><br>        <span class="hljs-keyword">Class</span>[] interfaces = &#123;UserDao.<span class="hljs-keyword">class</span>&#125;;<br><br>        UserDao dao = (UserDao)Proxy.newProxyInstance(JDKProxy.<span class="hljs-keyword">class</span>.getClassLoader(),<br>                interfaces,<br>               <span class="hljs-built_in">new</span>  UserDaoProxy(<span class="hljs-built_in">new</span> UserDaoImpl()));<br><br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(dao.<span class="hljs-keyword">add</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>));<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> UserDaoProxy implements InvocationHandler&#123;<br>    private UserDao target;<br><br>    <span class="hljs-built_in">public</span> UserDaoProxy(UserDao target) &#123;<br>        this.target = target;<br>    &#125;<br><br>    @Override<br>    <span class="hljs-built_in">public</span> <span class="hljs-keyword">Object</span> invoke(<span class="hljs-keyword">Object</span> proxy, <span class="hljs-keyword">Method</span> <span class="hljs-keyword">method</span>, <span class="hljs-keyword">Object</span>[] args) throws Throwable &#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">method</span>.getName()+ Arrays.toString(args));<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;=============before==========&quot;);<br>        <span class="hljs-keyword">Object</span> res = <span class="hljs-keyword">method</span>.invoke(target,args);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;===============after===========&quot;);<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="aop操作术语"><a href="#aop操作术语" class="headerlink" title="aop操作术语"></a>aop操作术语</h4><p>1 连接点: 类里面哪些点可以被增强,这些方法称为连接点<br>2 切入点: 实际被真正增强的方法,称为切入点<br>3 通知(增强):<br>    3.1 实际增强的逻辑部分称为通知(增强)<br>    3.2 通知有多种类型<br>        前置通知<br>        后置通知<br>        环绕通知<br>        异常通知<br>        最终通知<br>4 切面<br>    4.1 把通知应用到切入点的过程</p><h4 id="aop操作"><a href="#aop操作" class="headerlink" title="aop操作"></a>aop操作</h4><p>1 Spring框架一般基于AspectJ实现AOP操作<br>    1.1 什么是AspectJ<br>        一个独立的aop框架,现结合Spring框架一起使用<br>    1.2 基于AspectJ实现aop操作–[1基于xml配置文件实现;2基于注解方式实现]</p><ul><li>具体实现<br>1 坐标引入<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.8.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="切入点表示式"><a href="#切入点表示式" class="headerlink" title="切入点表示式"></a>切入点表示式</h4><p>1 切入点表达式作用:知道对哪个类里面的哪个方法进行增强<br>2 语法结构:<br>execution([权限修饰符][返回类型][类全路径]<a href="%5B%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8%5D">方法名称</a>)<br>例子 对com.middlename.dao.BookDao里面的add增强<br>execution(* com.middlename.dao.BookDao.add(..))<br>例子 对com.middlename.dao.BookDao里面的所有方法增强 * 表示所有<br>execution(* com.middlename.dao.BookDao.<em>(..))<br>例子 对com.middlename.dao.BookDao里面的所有类的所有方法增强<br>execution(</em> com.middlename.dao.<em>.</em>(..))</p><h4 id="aop操作-aspectJ注解"><a href="#aop操作-aspectJ注解" class="headerlink" title="aop操作(aspectJ注解)"></a>aop操作(aspectJ注解)</h4><p>1 创建一个类 User;创建一个增强类<br>2 打上@Component注释–增强类中添加@Aspect注解–增强方法编写相应的通知注释<br>@Before(execution(表达式))<br>@After<br>@AfterReturn<br>@AfterThrowing<br>@Around</p><p>代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> &#123;<br><br>    <span class="hljs-meta">@Before(&quot;execution(* com.middlename.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;===========before()===========&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@After(&quot;execution(* com.middlename.aopanno.User.add(..))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;===========after()===========&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5 相同切入点抽取,重用切入点的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxy</span> &#123;<br>    <span class="hljs-meta">@Pointcut(value = &quot;execution(* com.middlename.aopanno.User.add(..))&quot;)</span> <span class="hljs-comment">//提取公共的切入点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointdemo</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-meta">@Before(value = &quot;pointdemo()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;===========before()===========&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@After(value = &quot;pointdemo()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;===========after()===========&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>6 有多个增强类对于同一个方法,指定优先级<br>    1 在增强类上面添加注解@Order(数字类型值),数字类型值越小优先级越高</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Component</span><br><span class="hljs-variable">@Aspect</span><br><span class="hljs-variable">@Order</span>(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><h3 id="aop基于配置文件xml"><a href="#aop基于配置文件xml" class="headerlink" title="aop基于配置文件xml"></a>aop基于配置文件xml</h3><p><a href="https://blog.csdn.net/qq_41375318/article/details/109384528">https://blog.csdn.net/qq_41375318/article/details/109384528</a></p><h3 id="完全注解开发-1"><a href="#完全注解开发-1" class="headerlink" title="完全注解开发"></a>完全注解开发</h3><p>创建配置类</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Configuration</span><br><span class="hljs-variable">@ComponentScan</span>(basePackages = &#123;<span class="hljs-string">&quot;com.middlename&quot;</span>&#125;)<br><span class="hljs-variable">@EnableAspectJAutoProxy</span>(proxyTargetClass = true)<br>public class SpringConfig &#123;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql</title>
    <link href="/2022/06/06/mysql/"/>
    <url>/2022/06/06/mysql/</url>
    
    <content type="html"><![CDATA[<h1 id="菜鸟教程-基础语法"><a href="#菜鸟教程-基础语法" class="headerlink" title="菜鸟教程-基础语法"></a>菜鸟教程-基础语法</h1><h3 id="database"><a href="#database" class="headerlink" title="database"></a>database</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>创建数据库<br>    create database 数据库名;<br><span class="hljs-regexp">//</span>删除数据库<br>    drop database 数据库名;<br><span class="hljs-regexp">//</span>选择数据库<br>    use database 数据库名;<br><span class="hljs-regexp">//</span>查看数据库<br>    show databases;<br></code></pre></td></tr></table></figure><h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//创建表<br>    <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名字(<br>        字段名字 字段类型   约束<br>        `field1` <span class="hljs-type">int</span> ,<br>        `field2` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),<br>    );<br>//删除表<br>    <span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> 表名;<br>//插入数据<br>    <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名字<br>    (字段名字<span class="hljs-number">1</span>,字段名字<span class="hljs-number">2.</span>.)<br>    <span class="hljs-keyword">values</span><br>    (字段值<span class="hljs-number">1</span>,字段值<span class="hljs-number">2.</span>.);<br>//查询数据<br>    <span class="hljs-keyword">select</span> 字段名<span class="hljs-number">1</span>,字段名<span class="hljs-number">2</span><br>    <span class="hljs-keyword">from</span> 表名<br>    [<span class="hljs-keyword">where</span> 语句]<br>    [<span class="hljs-keyword">limit</span> n][<span class="hljs-keyword">offset</span> m]<br>//<span class="hljs-keyword">update</span>更新<br>    <span class="hljs-keyword">update</span> 表名 <span class="hljs-keyword">set</span> 字段名字<span class="hljs-number">1</span>=字段值<span class="hljs-number">1</span>,字段名字<span class="hljs-number">2</span>=字段值<span class="hljs-number">2</span><br>    [<span class="hljs-keyword">where</span> clause];<br>//<span class="hljs-keyword">delete</span>语句<br>    <span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名 <br>    [<span class="hljs-keyword">where</span> clause];<br>//<span class="hljs-keyword">union</span> 用于连接两个以上的<span class="hljs-keyword">select</span>语句的结果组合到一个结果集合中;<br>    <span class="hljs-keyword">select</span> 字段<span class="hljs-number">1</span> <span class="hljs-keyword">from</span> 表<span class="hljs-number">1</span><br>    <span class="hljs-keyword">union</span>[<span class="hljs-keyword">all</span> | <span class="hljs-keyword">distinct</span>]<br>    <span class="hljs-keyword">select</span> 字段<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> 表<span class="hljs-number">2</span>;<br>//排序<br>    <span class="hljs-keyword">select</span> 字段<span class="hljs-number">1</span>,字段<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> 表<span class="hljs-number">1</span>,表<span class="hljs-number">2</span><br>    <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 字段<span class="hljs-number">1</span>[<span class="hljs-keyword">asc</span> | <span class="hljs-keyword">desc</span>]<br>//分组<br>// <span class="hljs-number">1</span>按字段分组，并统计每个人有多少条记录<br>    <span class="hljs-keyword">select</span> <span class="hljs-type">name</span>,count(*) <span class="hljs-keyword">from</span> `employee_tbl`<br>    <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-type">name</span>;<br>// <span class="hljs-number">2</span> <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">ROLLUP</span> 可以实现在分组统计数据基础上再进行相同的统计（SUM,AVG,COUNT…）<br>    <span class="hljs-keyword">select</span> <span class="hljs-type">name</span>,sum(signin) <span class="hljs-keyword">as</span> sigin_count <span class="hljs-keyword">from</span> `employee_tbl`<br>    <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-type">name</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">rollup</span>;<br><br>// 连接<br>// <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span><br>    <span class="hljs-keyword">select</span> 字段<span class="hljs-number">1</span>,字段<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> 表<span class="hljs-number">1</span> <br>    <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> 表二<br>    <span class="hljs-keyword">on</span> 等值连接条件;<br>// <span class="hljs-keyword">left join</span><br>// <span class="hljs-keyword">right join</span><br><br>// <span class="hljs-keyword">null</span>值处理<br>    // <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span><br>    // <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br><br>// 正则表达式匹配<br>    <span class="hljs-keyword">select</span> 字段<span class="hljs-number">1</span> <span class="hljs-keyword">from</span> 表<span class="hljs-number">1</span><br>    <span class="hljs-keyword">where</span> 字段<span class="hljs-number">1</span> REGEXP &quot;正则表达式1&quot;;<br><br>！！ 事务！！<br><br><br></code></pre></td></tr></table></figure><p>where<br>like<br>连接<br>// left join<br>// right join</p><h3 id="！！事务"><a href="#！！事务" class="headerlink" title="！！事务"></a>！！事务</h3><ul><li><p>事务满足的4个条件(ACID)<br>1 原子性:一个事务要么全部完成;要么全部不完成<br>2 一致性:在事务开始前和事务结束后，数据库的完成性没有被破坏。<br>3 隔离性:允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发由于交叉执行而导致数据不一致</p></li><li><ul><li>事务隔离分离等级<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">读未提交<br>读提交<br>可重复读<br>串行化<br></code></pre></td></tr></table></figure>4 持久性: 事务处理结束后，对数据的修改是永久的</li></ul></li><li><p>事务控制语句</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1</span> <span class="hljs-keyword">begin</span> 或 <span class="hljs-keyword">start</span> <span class="hljs-keyword">transaction</span>显示开启一个事务<br><span class="hljs-number">2</span> <span class="hljs-keyword">commit</span>,会提交事务，并对数据库进行的修改称为永久性的<br><span class="hljs-number">3</span> <span class="hljs-keyword">rollback</span>,回滚会结束用户的事务,并撤销正在进行的所有未提交的修改<br><span class="hljs-number">4</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">transaction</span> 用来设置事务的隔离级别.<br>    包含<span class="hljs-keyword">READ</span> <span class="hljs-keyword">UNCOMMITTED</span>、<span class="hljs-keyword">READ</span> <span class="hljs-keyword">COMMITTED</span>、<span class="hljs-keyword">REPEATABLE</span> <span class="hljs-keyword">READ</span> 和 <span class="hljs-keyword">SERIALIZABLE</span>。<br></code></pre></td></tr></table></figure></li><li><p>mysql事务处理的两种方法<br>1 begin开始一个事务<br>2 rollback事务回滚<br>3 commit事务确认</p></li><li><p>直接用set来改变mysql的自动提交模式<br>1 set autocommit=0 禁止自动提交<br>2 set autocommit=1 开启自动提交</p></li></ul><h3 id="alert命令"><a href="#alert命令" class="headerlink" title="alert命令"></a>alert命令</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-comment">//删除 增加 修改表字段</span><br>    alert <span class="hljs-keyword">table</span> 表名 drop <span class="hljs-comment">i</span>;<br>    alert <span class="hljs-keyword">table</span> 表名 add <span class="hljs-comment">i int</span>;<br>    alert <span class="hljs-keyword">table</span> 表名 modify 字段<span class="hljs-comment">1</span> 新类型;<br><span class="hljs-comment">//指定默认值</span><br>    alert <span class="hljs-keyword">table</span> 表名 modify 字段 新类型 <span class="hljs-comment">not null default 100</span>;<br><span class="hljs-comment">//修改表名</span><br>    alert <span class="hljs-keyword">table</span> 表名 rename <span class="hljs-comment">to</span> 新名;<br></code></pre></td></tr></table></figure><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h1 id="尚硅谷"><a href="#尚硅谷" class="headerlink" title="尚硅谷"></a>尚硅谷</h1><ul><li>综述<br>18个章节</li></ul><h2 id="0数据库概述"><a href="#0数据库概述" class="headerlink" title="0数据库概述"></a>0数据库概述</h2><p>1 持久化persistence：把数据保存到课掉电式设备中供之后使用</p><ul><li><p>数据库：存储数据的仓库，本质时一个文件系统，保存了一系列有组织的数据。</p></li><li><p>数据库管理系统:一种操纵和管理数据库的软件，用于建立，使用和维护数据库</p></li><li><p>结构化查询语言: 专门用于与数据库进行通信的语言</p></li><li><p>DBMS排名- 常用的数据库管理系统<br>Oracle Mysql<br>DB2:常应用于银行系统<br>SQLite:手机端</p></li></ul><h3 id="关系型数据库-RDBMS"><a href="#关系型数据库-RDBMS" class="headerlink" title="关系型数据库(RDBMS)"></a>关系型数据库(RDBMS)</h3><ul><li>关系模型:现实世界中各种实体以及实体之间的各种联系</li><li>关系型数据库，建立在关系模型基础上的数据库。</li></ul><h2 id="关系型数据库设计规则"><a href="#关系型数据库设计规则" class="headerlink" title="关系型数据库设计规则"></a>关系型数据库设计规则</h2><h3 id="表，记录，字段"><a href="#表，记录，字段" class="headerlink" title="表，记录，字段"></a>表，记录，字段</h3><ul><li>E-R模型三个主要概念：实体集，属性，联系集<br>1 一个实体集 == 数据库的一个表；    一个实体 == 数据库表中的一行；  一个属性 == 数据库表中的一列</li></ul><h3 id="表的关联关系"><a href="#表的关联关系" class="headerlink" title="表的关联关系"></a>表的关联关系</h3><ul><li>表与表之间的数据记录有关系。现实世界中的各种实体以及实体之间的各种联系均用关系模型来表示</li><li>四种：一对一关联，一对多关联，多对多关联，自我引用</li></ul><h4 id="一对一关联"><a href="#一对一关联" class="headerlink" title="一对一关联"></a>一对一关联</h4><ul><li>举例：学生基础信息表(常用信息) – 学生档案信息表(不常用信息)</li><li>两种建表原则：<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">外键唯一    :主表的主键和从表的外键，形成主外键关系，外键唯一<br>外键是主键  :主表的主键和从表的主键，形成主外键关系<br></code></pre></td></tr></table></figure></li></ul><h4 id="一对多关系"><a href="#一对多关系" class="headerlink" title="一对多关系"></a>一对多关系</h4><ul><li>常见场景: 客户表和订单表；分类表和商品表；部门表和员工表</li><li>一对多建表原则：在从表建立一个字段，字段作为外键指向主表的主键</li></ul><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><ul><li>举例 学生-课程<br>1 学生信息表<br>2 课程信息表<br>3 选课信息表</li></ul><h4 id="自我引用"><a href="#自我引用" class="headerlink" title="自我引用"></a>自我引用</h4><p>外键指向同一个表的一行记录</p><h2 id="第3章-基本的select语句"><a href="#第3章-基本的select语句" class="headerlink" title="第3章 基本的select语句"></a>第3章 基本的select语句</h2><p>DDL数据定义。create \ alter \ drop \ rename \ truncate<br>DML数据操作。insert \ delete \update \ select<br>DCL数据控制。commit \ rollback \ savepoint \ grant \ revoke </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-built_in">table_name</span>;<br><br></code></pre></td></tr></table></figure><h4 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> file_name1<br><span class="hljs-keyword">from</span> table1<br><span class="hljs-keyword">limit</span> start_record_index,record_size;<br><br><span class="hljs-keyword">select</span> file_name1<br><span class="hljs-keyword">from</span> table1<br><span class="hljs-keyword">limit</span> (pageNo<span class="hljs-number">-1</span>)*pageSize,pageSize;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java</title>
    <link href="/2022/06/03/Java/"/>
    <url>/2022/06/03/Java/</url>
    
    <content type="html"><![CDATA[<h1 id="0综述"><a href="#0综述" class="headerlink" title="0综述"></a>0综述</h1><p>1 课程资料<br>尚硅谷java教学<br><a href="https://www.bilibili.com/video/BV1Kb411W75N?p=19&amp;spm_id_from=pageDriver">https://www.bilibili.com/video/BV1Kb411W75N?p=19&amp;spm_id_from=pageDriver</a></p><p><img src="/img/java/0.png" alt="java知识体系"></p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">dir</span>      //列出当前目录下的文件以及文件夹<br><span class="hljs-built_in">md</span>       //创建目录<br><span class="hljs-built_in">rd</span>       //删除目录<br><span class="hljs-built_in">cd</span>       //进入指定目录<br><span class="hljs-built_in">cd</span>..     //退回上一级<br><span class="hljs-built_in">cd</span>\      //退回根目录<br><span class="hljs-built_in">del</span>      //删除文件<br><span class="hljs-keyword">exit</span>     //推出dos命令行<br>   <span class="hljs-built_in">echo</span> file_data_information&gt;<span class="hljs-number">1</span>.<span class="hljs-built_in">md</span>     //写入内容到指定文件<br></code></pre></td></tr></table></figure><h2 id="1java语言概述"><a href="#1java语言概述" class="headerlink" title="1java语言概述"></a>1java语言概述</h2><ul><li><p>1面向对象</p></li><li><ul><li>两个基本概念: 类，对象</li></ul></li><li><ul><li>三大特性: 封装，继承，多态</li></ul></li><li><p>2健壮性</p></li><li><ul><li>吸收了C/C++语言的优点,但去掉了其影响程序健壮性的部分,提供了一个相对安全的内存管理和访问机制</li></ul></li><li><p>3跨平台性</p></li><li><ul><li>跨平台性：通过Java语言编写的应用程序在不同的系统平台上都可以运行。</li></ul></li></ul><h2 id="2Java语言运行机制及运行过程"><a href="#2Java语言运行机制及运行过程" class="headerlink" title="2Java语言运行机制及运行过程"></a>2Java语言运行机制及运行过程</h2><ul><li><p>Java虚拟机<br>一次编译到处运行</p></li><li><p>垃圾自动回收<br>垃圾回收在Java程序运行过程中自动进行，程序员无法精确控制和干预</p></li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 单行注释</span><br><span class="hljs-comment">/* 多行注释 */</span><br><br><span class="hljs-comment">/**   文档注释   */</span>     可以被javadoc解析生成一套以网页文件形式体现的该程序的说明文档<br><br>javadoc -d mydoc -author -version HelloWorld.java<br></code></pre></td></tr></table></figure><ul><li>public 只能修饰同名的类</li></ul><h1 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h1><ul><li><p>菜鸟教程</p><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>1 分类 = 访问修饰符，非访问修饰符；修饰符用来定义类，方法或者变量，通常放在语句的最前端</p></li><li><p>访问控制修饰符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">default</span>  <br><span class="hljs-keyword">private</span>     在同一类内可见；使用对象：变量，方法<br><span class="hljs-keyword">public</span>      在所有类可见；使用对象：类，接口，变量，方法<br><span class="hljs-keyword">protected</span>   对同一包内的类和所有子类可见；使用对象：变量，方法。注意：不能修饰类<br></code></pre></td></tr></table></figure></li><li><p>非访问修饰符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span><br><span class="hljs-keyword">final</span><br><span class="hljs-keyword">abstract</span><br><span class="hljs-keyword">synchronized</span><br><span class="hljs-keyword">transient</span><br></code></pre></td></tr></table></figure></li><li><p>static修饰符<br>1静态变量：一个类实例化多少对象，它的静态变量只有一份拷贝。<br>2静态方法：静态方法不能使用非静态变量。静态方法从参数列表得到数据，然后计算这些数据</p></li><li><p>final修饰符<br>1 final变量一旦赋值后，不能被重新赋值。被final修饰的实例变量必须显式指定初始值；final修饰符和static修饰符一起使用创建类常量。<br>2 final方法可以被子类继承，但是不能被子类重写。</p></li><li><p>abstract修饰符<br>1 抽象方法是一种没有实现的方法；该方法的具体实现由子类提供<br>2 抽象方法不能声明为final和static<br>3 任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类<br>4 如果一个类包包含若干个抽象方法，那么该类必须被声明为抽象类。抽象类可以不包含抽象方法<br>5 抽象方法的声明以分号结尾</p></li><li><p>synchronized修饰符<br>synchronized 关键字声明的方法同一时间只能被一个线程访问。</p></li><li><p>transient修饰符<br>1 序列化的对象包含被transient修饰的实例变量时，java虚拟机跳过该特定的变量。<br>2 该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型</p></li></ul><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//while循环</span><br><span class="hljs-keyword">while</span>(布尔表达式)&#123;<br>   <span class="hljs-comment">//循环内容</span><br>&#125;<br><br><span class="hljs-keyword">do</span>&#123;<br>   <span class="hljs-comment">//代码语句</span><br>&#125;<span class="hljs-keyword">while</span>(布尔表达式)<br><br><span class="hljs-keyword">for</span>(初始化;布尔表达式;更新)&#123;<br>   <span class="hljs-comment">// 代码语句</span><br>&#125;<br><br><span class="hljs-comment">//java增强for循环</span><br><span class="hljs-keyword">for</span>(声明语句:表达式)&#123;<br>   <span class="hljs-comment">//代码句子</span><br>&#125;<br><br><span class="hljs-comment">//例子</span><br>        <span class="hljs-type">int</span> numbers[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> ite:numbers)&#123;<br>            System.out.println(ite);<br>        &#125;<br></code></pre></td></tr></table></figure><ul><li>break,continue</li></ul><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(confition)<br>&#123;  <span class="hljs-literal">true</span>==&gt;statement   &#125;<br><br><span class="hljs-keyword">if</span>(condition1)&#123;  true1=&gt;statement    &#125;<br><span class="hljs-keyword">else</span>&#123;<br>   <span class="hljs-literal">false</span> =&gt; statement2<br>&#125;<br><br><span class="hljs-keyword">if</span>()&#123;&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>&#123;&#125;<br><span class="hljs-keyword">else</span>&#123;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(expression)&#123;<br>   <span class="hljs-keyword">case</span> value:<br>      statement1;<br>      <span class="hljs-keyword">break</span>;<br>   <span class="hljs-keyword">case</span> value2:<br>      statement2;<br>      <span class="hljs-keyword">break</span>;<br>   <span class="hljs-keyword">default</span>:<br>      statement;<br>      <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Number-amp-Math类"><a href="#Number-amp-Math类" class="headerlink" title="Number&amp;Math类"></a>Number&amp;Math类</h3><ul><li><p>1Number<br>Java为每一个内置数据类型提供了对应的包装类。<br>所有的包装类（Integer、Long、Byte、Double、Float、Short）都是抽象类 Number 的子类。 </p></li><li><p>2Math<br>Java 的 Math 包含了用于执行基本数学运算的属性和方法，如初等指数、对数、平方根和三角函数。<br>Math 的方法都被定义为 static 形式，通过 Math 类可以在主函数中直接调用。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">xxxValue</span><span class="hljs-params">()</span></span><br>将 Number 对象转换为xxx数据类型的值并返回。<br><span class="hljs-function"><span class="hljs-title">equals</span><span class="hljs-params">()</span></span><br>判断number对象是否与参数相等。<br><span class="hljs-function"><span class="hljs-title">valueOf</span><span class="hljs-params">()</span></span><br>返回一个 Number 对象指定的内置数据类型<br><span class="hljs-function"><span class="hljs-title">toString</span><span class="hljs-params">()</span></span><br>以字符串形式返回值。<br><span class="hljs-function"><span class="hljs-title">parseInt</span><span class="hljs-params">()</span></span><br>将字符串解析为int类型。<br><span class="hljs-function"><span class="hljs-title">abs</span><span class="hljs-params">()</span></span><br>返回参数的绝对值。<br><span class="hljs-function"><span class="hljs-title">ceil</span><span class="hljs-params">()</span></span><br>返回大于等于( &gt;= )给定参数的的最小整数，类型为双精度浮点型。<br><span class="hljs-function"><span class="hljs-title">floor</span><span class="hljs-params">()</span></span><br>返回小于等于（&lt;=）给定参数的最大整数 。<br><span class="hljs-function"><span class="hljs-title">rint</span><span class="hljs-params">()</span></span><br>返回与参数最接近的整数。返回类型为double。<br><span class="hljs-function"><span class="hljs-title">round</span><span class="hljs-params">()</span></span><br>它表示四舍五入，算法为 Math<span class="hljs-selector-class">.floor</span>(x+<span class="hljs-number">0.5</span>)，即将原来的数字加上 <span class="hljs-number">0.5</span> 后再向下取整，所以，Math<span class="hljs-selector-class">.round</span>(<span class="hljs-number">11.5</span>) 的结果为<span class="hljs-number">12</span>，Math<span class="hljs-selector-class">.round</span>(-<span class="hljs-number">11.5</span>) 的结果为-<span class="hljs-number">11</span>。<br><span class="hljs-function"><span class="hljs-title">min</span><span class="hljs-params">()</span></span><br>返回两个参数中的最小值。<br><span class="hljs-function"><span class="hljs-title">max</span><span class="hljs-params">()</span></span><br>返回两个参数中的最大值。<br><span class="hljs-function"><span class="hljs-title">pow</span><span class="hljs-params">()</span></span><br>返回第一个参数的第二个参数次方。<br><span class="hljs-function"><span class="hljs-title">sqrt</span><span class="hljs-params">()</span></span><br>求参数的算术平方根。<br><span class="hljs-function"><span class="hljs-title">random</span><span class="hljs-params">()</span></span><br>返回一个随机数。<br></code></pre></td></tr></table></figure></li><li><p>字符串转Integer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;12345&quot;</span>;<br>   <span class="hljs-type">Integer</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> Integer.parseInt(str1);<br>   System.out.println(data);System.out.println(data.getClass());<br><br>   <span class="hljs-type">Integer</span> <span class="hljs-variable">data2</span> <span class="hljs-operator">=</span> Integer.valueOf(str1);<br>   System.out.println(data2);System.out.println(data2.getClass());<br><br>   <span class="hljs-type">Integer</span> <span class="hljs-variable">data3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(str1);<br>   System.out.println(data3);System.out.println(data3.getClass());<br><br><span class="hljs-comment">// 非法输入</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ab.12345&quot;</span>;     <span class="hljs-comment">//包含非数值型字符</span><br><br></code></pre></td></tr></table></figure></li><li><p>字符串转Double</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;12345.12&quot;</span>;<br>   <span class="hljs-type">Double</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> Double.parseDouble(str1);<br>   System.out.println(data);System.out.println(data.getClass());<br><br>   <span class="hljs-type">Double</span> <span class="hljs-variable">data2</span> <span class="hljs-operator">=</span> Double.valueOf(str1);<br>   System.out.println(data2);System.out.println(data2.getClass());<br><br>   <span class="hljs-type">Double</span> <span class="hljs-variable">data3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Double</span>(str1);<br>   System.out.println(data3);System.out.println(data3.getClass());<br><br><span class="hljs-comment">// 合法形参</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.12345&quot;</span>;       <span class="hljs-comment">//Double可包含.表示小数</span><br><br><span class="hljs-comment">// 非法形参</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ab.12345&quot;</span>;     <span class="hljs-comment">//包含非数值型字符</span><br></code></pre></td></tr></table></figure></li><li><p>数字转字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//直接转</span><br>   <span class="hljs-type">Integer</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">123</span>);<br>   <span class="hljs-type">String</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> data.toString();<br>   System.out.println(temp);<br></code></pre></td></tr></table></figure></li><li><p>数字型对象之间的转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用数字类型1.TypeValue()</span><br>   <span class="hljs-type">Integer</span> <span class="hljs-variable">in1</span> <span class="hljs-operator">=</span> <span class="hljs-number">123</span>;<br>   System.out.println(in1.doubleValue());<br></code></pre></td></tr></table></figure></li></ul><h3 id="Character-类"><a href="#Character-类" class="headerlink" title="Character 类"></a>Character 类</h3><p>Character 类用于对单个字符进行操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">isLetter()<br>是否是一个字母<br>isDigit()<br>是否是一个数字字符<br>isWhitespace()<br>是否是一个空白字符<br>isUpperCase()<br>是否是大写字母<br>isLowerCase()<br>是否是小写字母<br>toUpperCase()<br>指定字母的大写形式<br>toLowerCase()<br>指定字母的小写形式<br>toString()<br>返回字符的字符串形式，字符串的长度仅为<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>判断输入的字符串符合格式否<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1 判断全是数字否</span><br>   <span class="hljs-type">String</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123123131&quot;</span>;<br>   <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;temp.length();i++)&#123;<br>      <span class="hljs-keyword">if</span>(!Character.isDigit(temp.charAt(i)))&#123;<br>            flag = <span class="hljs-literal">false</span>;<br>      &#125;<br>   &#125;<br>   System.out.println(flag);<br><br><span class="hljs-comment">// 2 判断全是字符否 同理 isLetter()</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="String-类"><a href="#String-类" class="headerlink" title="String 类"></a>String 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1创建字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;string data&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;string data&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li><p>常用的字符串操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1连接字符串</span><br>   <span class="hljs-string">&quot;concating &quot;</span>.concat(<span class="hljs-string">&quot;string sequence&quot;</span>);<br>   <span class="hljs-string">&quot;concating&quot;</span>+<span class="hljs-string">&quot;string&quot;</span><br><br><span class="hljs-comment">// 2创建格式化字符串</span><br>   String fs;<br>   <span class="hljs-type">double</span> f1=<span class="hljs-number">3.14</span>;<br>   <span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>   <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sth&quot;</span>;<br>   fs = String.format(Locale.CHINA,<span class="hljs-string">&quot;string value&quot;</span>+<br>            <span class="hljs-string">&quot;浮点型变量的值为%f,&quot;</span>+<br>            <span class="hljs-string">&quot;整形变量的值为%d&quot;</span>+<br>            <span class="hljs-string">&quot;字符串变量的值为%s&quot;</span>,f1,i1,s1).;<br><br>   System.out.println(fs);<br></code></pre></td></tr></table></figure></li><li><p>String 方法</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-built_in">charAt</span>()    <span class="hljs-comment">// 返回指定索引处的char值</span><br>   <span class="hljs-type">char</span> result = <span class="hljs-string">&quot;1234567&quot;</span>.<span class="hljs-built_in">charAt</span>(<span class="hljs-number">6</span>);<br><br><span class="hljs-built_in">endsWith</span>(<span class="hljs-type">String</span> suffix)    <span class="hljs-comment">//测试此字符串是否以指定的后缀结尾</span><br>   <span class="hljs-type">boolean</span> result = <span class="hljs-string">&quot;123456&quot;</span>.<span class="hljs-built_in">endsWith</span>(<span class="hljs-string">&quot;456&quot;</span>);<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">hasCode</span><span class="hljs-params">()</span>     <span class="hljs-comment">//返回该字符串的hash码</span></span><br><span class="hljs-function">   <span class="hljs-type">int</span> result </span>= <span class="hljs-string">&quot;123456&quot;</span>.<span class="hljs-built_in">hashCode</span>();<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span>      <span class="hljs-comment">//返回字符串处理</span></span><br><span class="hljs-function">   <span class="hljs-type">int</span> result </span>= <span class="hljs-string">&quot;123&quot;</span>.<span class="hljs-built_in">length</span>();<br><br><span class="hljs-function"><span class="hljs-type">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(charSequence chars)</span>      <span class="hljs-comment">// 判断字符串包含指定字符序列否</span></span><br><span class="hljs-function">   <span class="hljs-type">boolean</span> result </span>= <span class="hljs-string">&quot;12345&quot;</span>.<span class="hljs-built_in">contains</span>(<span class="hljs-string">&quot;23&quot;</span>);<br><br><span class="hljs-function"><span class="hljs-type">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span></span><br><span class="hljs-function">   <span class="hljs-type">boolean</span> result </span>= <span class="hljs-string">&quot;1234&quot;</span>.<span class="hljs-built_in">isEmpty</span>();<br><br><span class="hljs-function"><span class="hljs-type">String</span> <span class="hljs-title">trim</span><span class="hljs-params">()</span>     <span class="hljs-comment">//去除首尾空格</span></span><br><span class="hljs-function">   <span class="hljs-type">String</span> result </span>= <span class="hljs-string">&quot;  123  45  &quot;</span>.<span class="hljs-built_in">trim</span>();<br></code></pre></td></tr></table></figure></li></ul><h3 id="StringBuffer和StringBuilder"><a href="#StringBuffer和StringBuilder" class="headerlink" title="StringBuffer和StringBuilder"></a>StringBuffer和StringBuilder</h3><ul><li><p>StringBuilder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-number">10</span>);<br>sb.append(<span class="hljs-string">&quot;Runoob..&quot;</span>);<br>System.out.println(sb);  <br>sb.append(<span class="hljs-string">&quot;!&quot;</span>);<br>System.out.println(sb); <br>sb.insert(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;Java&quot;</span>);<br>System.out.println(sb); <br>sb.delete(<span class="hljs-number">5</span>,<span class="hljs-number">8</span>);<br>System.out.println(sb);<br></code></pre></td></tr></table></figure><p><img src="/img/java/s1.png" alt="StringBuilder"></p></li><li><p>StringBuffer<br>应用程序要求线程安全的情况下，则必须使用 StringBuffer类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;菜鸟教程官网：&quot;</span>);<br>sBuffer.append(<span class="hljs-string">&quot;www&quot;</span>);<br>sBuffer.append(<span class="hljs-string">&quot;.runoob&quot;</span>);<br>sBuffer.append(<span class="hljs-string">&quot;.com&quot;</span>);<br>System.out.println(sBuffer);  <br></code></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;string infomation&quot;</span>);<br><span class="hljs-comment">// 将指定的字符串追加到此字符序列</span><br>sBuffer.append(<span class="hljs-string">&quot;appending string information&quot;</span>);<br><span class="hljs-comment">// 移除此序列的子字符串中的字符</span><br>sBuffer.delete(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>System.out.println(sBuffer);<br><span class="hljs-comment">// 将str参数的字符插入此序列中</span><br>sBuffer.insert(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;  insert string information&quot;</span>);<br>System.out.println(sBuffer);<br></code></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 声明数组</span><br>   dataType[] arrayRefVar;<br>   dataType arrayRefVar[];<br><br>   <span class="hljs-type">double</span>[] myList;<br>   <span class="hljs-type">double</span> mylist1[];<br><br><span class="hljs-comment">// 创建数组</span><br>   array1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">dataType</span>[arraySize];<br>   dataType[] array2 = &#123;value0,value1,value3...valuek&#125;;<br>   <br><br><span class="hljs-comment">//数组作为函数的返回值</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] reverse(<span class="hljs-type">int</span>[] list)&#123;<br>      <span class="hljs-type">int</span> []result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[list.length]<br>      <br><br>      <span class="hljs-keyword">return</span> result;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="日期时间"><a href="#日期时间" class="headerlink" title="日期时间"></a>日期时间</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取当前日期时间</span><br><span class="hljs-comment">// SimpleDateFormat  格式化日期</span><br>   <span class="hljs-type">Date</span> <span class="hljs-variable">date1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>   <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);<br>   System.out.println(ft.format(date1));<br><br><span class="hljs-comment">// 日期比较</span><br>   <span class="hljs-type">Date</span> <span class="hljs-variable">date1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">99</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>);<br>   <span class="hljs-type">Date</span> <span class="hljs-variable">date2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">99</span>,<span class="hljs-number">3</span>,<span class="hljs-number">12</span>);<br><br>   System.out.println(date1.before(date2));<br>   System.out.println(date1.after(date2));<br><br><span class="hljs-comment">// 测量时间</span><br>   <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1000</span>;i++)&#123;<br>      System.out.println(<span class="hljs-string">&quot;good job&quot;</span>);<br>   &#125;<br>   <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>   System.out.println(end - start);<br></code></pre></td></tr></table></figure><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>正则表达式定义了字符串的模式,用于搜索，编辑或处理文本</p><p>java.util.regex 包主要包括以下三个类：<br>    Pattern 类：<br>    pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。</p><pre><code class="hljs">Matcher 类：Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。PatternSyntaxException：PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;l am noob from the world some appending string value&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.*appending string.*&quot;</span>;<br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">isMatch</span> <span class="hljs-operator">=</span> Pattern.matches(pattern,content);<br>System.out.println(isMatch);<br></code></pre></td></tr></table></figure><h3 id="Java流-文件File和IO"><a href="#Java流-文件File和IO" class="headerlink" title="Java流,文件File和IO"></a>Java流,文件File和IO</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 从控制台读取字符输入</span><br>   <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(Ststem.in));<br>   <span class="hljs-type">char</span> ch;<br>   <span class="hljs-keyword">do</span>&#123;<br>      ch = (<span class="hljs-type">char</span>) br.read();<br>      System.out.println(ch);<br>   &#125;<span class="hljs-keyword">while</span>(ch != <span class="hljs-string">&#x27;q&#x27;</span>);<br><br><span class="hljs-comment">// 从控制台读取字符串输入</span><br>   <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>   String str;<br><br>   <span class="hljs-keyword">do</span>&#123;<br>      str = (String)br.readLine();<br>      System.out.println(str);<br>   &#125;<span class="hljs-keyword">while</span>(!str.equals(<span class="hljs-string">&quot;end&quot;</span>));<br></code></pre></td></tr></table></figure><p>！！！！！！！！！！文件</p><ul><li>读写文件<br><img src="/img/java/1.1.png" alt="java文件io流"></li></ul><p>输入流：数据从数据源到程序的路径<br>输出流：数据从程序到数据源的路径</p><ul><li>常用文件操作<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建文件对象以及获取相应的文件信息</span><br>   <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;./test.txt&quot;</span>);<br>   System.out.println(file.getName());<br>   System.out.println(file.getAbsoluteFile());<br>   System.out.println(file.getParent());<br>   System.out.println(file.length());<br>   System.out.println(file.isDirectory());<br><br><span class="hljs-comment">// 使用FileInputStream读取hello.txt</span><br><br></code></pre></td></tr></table></figure></li></ul><h3 id="Scanner-类"><a href="#Scanner-类" class="headerlink" title="Scanner 类"></a>Scanner 类</h3><ul><li>从键盘获取输入<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用next方法</span><br>   <span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>   <span class="hljs-keyword">if</span>(scan.hasNext())&#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> scan.next();<br>      System.out.println(<span class="hljs-string">&quot;输入的数据为&quot;</span>+str1);<br>   &#125;<br>   scan.close();<br><span class="hljs-comment">// 使用nextLine方法</span><br>   <span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>   <span class="hljs-keyword">if</span>(scan.hasNextLine())&#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> scan.nextLine();<br>      System.out.println(str2);<br>   &#125;<br>   scan.close();<br></code></pre></td></tr></table></figure></li></ul><h2 id="Java面向对象"><a href="#Java面向对象" class="headerlink" title="Java面向对象"></a>Java面向对象</h2><h3 id="java继承"><a href="#java继承" class="headerlink" title="java继承"></a>java继承</h3><p>继承：java面向对象编程技术的一块基石，应为它允许创建分等级层次的类。<br>继承就是子类继承父类的特征和行为，使得子类对象具有父类的实例化和方法，或子类从父类继承方法，使得子类具有父类相同的行为。</p><ul><li><p>类的继承格式<br>extends关键字继承</p></li><li><p>继承的特性<br>1 子类拥有父类非private的属性，方法<br>2 子类可用拥有自己的属性和方法，即子类可以对父类进行扩展<br>3 子类可以用自己的方式实现父类的方法<br>4 Java的继承是单继承，可以多重继承<br>5 提高了类之间的耦合性</p></li><li><p>继承关键字<br>1 extends 和 implements</p></li><li><p>super与this关键字<br>1 super关键字：实现对父类成员的访问，用来引用当前对象的父类<br>2 this关键字：指向自己的引用</p></li><li><p>final关键字<br>将类定义为最终类，不能被继承，或者用于修饰方法，该方法不能被子类重写</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> 类名 &#123;<span class="hljs-comment">//类体&#125;</span><br>(其他修饰符<span class="hljs-keyword">public</span>/<span class="hljs-keyword">private</span>/<span class="hljs-keyword">default</span>/<span class="hljs-keyword">protected</span>)<span class="hljs-keyword">final</span> 返回值类型 方法名()&#123;<span class="hljs-comment">//方法体&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>构造器<br>子类不能继承父类的构造器，它只是调用。必须在子类的构造器中显式地通过super关键字调用父类地构造器。</p></li></ul><h3 id="Java重写与重载"><a href="#Java重写与重载" class="headerlink" title="Java重写与重载"></a>Java重写与重载</h3><ul><li><p>重写<br>重写是子类对父类地允许访问地方法地实现过程进行重新编写。</p></li><li><p>重写规则<br>1 参数列表与被重写方法地参数列表必须完全相同<br>2 返回类型与被重写方法地返回类型可以不相同，但是必须是父类返回值地2派生类<br>3 访问权限不能比父类中被重写地方法地访问权限更低。<br>4 父类地成员方法只能被他的子类重写<br>5 声明为final地方法不能被重写<br>声明为static地方法不能被重写，但是能够被再次声明<br>6 子类和父类在同一个包中，子类可以重写父类所有方法，除了private和final的方法<br>7 子类和父类不在同一包中，那么子类只能重写父类的中public和protected的非final的方法</p></li><li><p>重载<br>重载是在一个类里面，方法名字形同，而参数不同。<br>每个重载的方法都必须有一个独一无二的参数类型列表</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs">重载规则<br>被重载的方法必须改变参数列表<br>被重载的方法可以改变返回类型<br>被重载的方法可以改变访问修饰符<br>被重载的方法可以声明新的或更广的检查异常<br>方法能够在同一个类中或者在一个子类中被重载<br></code></pre></td></tr></table></figure></li><li><p>总结<br>方法的重写和重载是java多态性的不同表现，重写是父类与子类之间多态性的一种表现，重载可以理解成堕胎的具体表现形式。</p></li></ul><h3 id="Java多态"><a href="#Java多态" class="headerlink" title="Java多态"></a>Java多态</h3><p>多态是同一个行为具有多个不同表现形式或形态的能力<br>多态就是同一个接口，使用不同的实例而执行不同操作</p><ul><li><p>多态的有点<br>1 消除类型之间的耦合关系<br>2 可替代性<br>3 可扩充性<br>4 接口性<br>5 灵活性<br>6 简化性</p></li><li><p>多态存在的三个必要条件<br>1 继承<br>2 重写<br>3 父类引用指向子类对象</p></li></ul><h3 id="Java抽象类"><a href="#Java抽象类" class="headerlink" title="Java抽象类"></a>Java抽象类</h3><p>Java中抽象类表示的是一种继承关系，一个类只能继承一个抽象类，而一个类却可以实现多个接口</p><ul><li>抽象方法<br>如果设计一个类，该类包含一个特别的成员方法，该方法的具体实现有它的子类确定，那么你可以在父类中声明该方法为抽象方法</li></ul><ul><li>抽象类总结规定<br>1 抽象类不能被实例化。只有抽象类的非抽象子类可以创建对象<br>2 抽象类中不一定包含抽象方法，但是有抽象方法的类必须是抽象类<br>3 抽象类中的抽象方法知识声明，不包含方法体<br>4 构造方法，类方法(static修饰的方法)不能声明为抽象方法<br>5 抽象类的子类必须给出抽象类中的抽象方法的具体实现，除非子类也是抽象类</li></ul><h3 id="Java封装"><a href="#Java封装" class="headerlink" title="Java封装"></a>Java封装</h3><p>面向对象程序设计方法；封装是指一种将抽象性函式接口的实现细节部分包装。</p><ul><li><p>封装的优点<br>1 良好的封装能够减少耦合<br>2 类内部的结构可以自由修改<br>3 可以对成员变量进行更精准的控制<br>4 隐藏信息，实现细节</p></li><li><p>实现Java封装的步骤<br>1 修改属性的可见性来限制对属性的访问<br>2 对每个值属性提供对外的公共方法访问，也就是创建一堆赋取值方法，用于对私有属性的访问</p></li></ul><h3 id="Java接口"><a href="#Java接口" class="headerlink" title="Java接口"></a>Java接口</h3><p>接口，是抽象方法的集合，以interface声明。</p><ul><li><p>接口特性</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">接口中每一个方法也是隐式抽象的，接口中的方法会被隐式的指定为<span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span><br><br>接口中可以含有变量，但是接口中的变量会被隐式的指定为<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span>变量<br><br>接口中的方法是不能在接口中实现的，只能由实现接口的类实现接口中方法。<br></code></pre></td></tr></table></figure></li><li><p>抽象类和接口的区别</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>抽象类中的方法可以由方法体，就是能实现方法的具体功能，但是接口中的方法不行<br><br><span class="hljs-symbol">2 </span>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是public static final类型的<br><br><span class="hljs-symbol">3 </span>接口中不能含有静态代码块以及静态方法，而抽象类是可以由静态代码块和静态方法。<br><br><span class="hljs-symbol">4 </span>一个类只能继承一个抽象类，而一个类缺可以实现多个接口<br></code></pre></td></tr></table></figure></li><li><p>在实现接口的时候，也要注意一些规则</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>一个类可以同时实现多个接口<br><span class="hljs-symbol">2 </span>一个类只能继承一个类，但是能实现多个接口<br><span class="hljs-symbol">3 </span>一个接口能继承另一个接口<br></code></pre></td></tr></table></figure></li><li><p>标记接口<br>标记接口：没有任何方法和属性的接口。它仅仅表明它的类属于一个特定的类型。<br>标记接口作用：给莫格对象大哥标，使对象拥有某个或某个特权</p></li></ul><h2 id="Java数据结构"><a href="#Java数据结构" class="headerlink" title="Java数据结构"></a>Java数据结构</h2><p>Java工具包提供了强大的数据结构。在Java中的数据结构主要包括一下集中接口和类：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">枚举  位集合   向量  栈 字典  哈希表   属性<br></code></pre></td></tr></table></figure><ul><li>Java 集合框架<br>集合框架满足目标<br>1 框架必须是高性能的。基本集合(动态数组，链表，树，哈希表)的实现也必须是高效的。<br>2 该框架允许不同类型的集合，以类型的方式工作<br>3 对一个集合的扩展和适应必须是简单的<br><img src="/img/java/1.2.png" alt="java集合框架图"></li></ul><p>Java 集合框架 = [Collection,Map];<br>Collection存储一个元素的集合<br>Map存储键/值对映射。<br>Collection接口又有3中子类型,List,Set和Queue加ArrayList,LinkedList,HashSet,LinkedHashSet,HashMap,LinkedHashMap</p><ul><li>接口：是代表集合的抽象数据类型。例如Collection,List,Set,Map等。</li><li>实现：是集合接口的具体实现。可重复使用的数据结构,例如：ArrayList,LinkedList,HashSet,HashMap</li><li>算法：是实现集合接口的对象里的方法执行的一些有用的计算，例如：搜索和排序。</li></ul><h3 id="Java-ArrayList"><a href="#Java-ArrayList" class="headerlink" title="Java ArrayList"></a>Java ArrayList</h3><p>ArrayList 是一个可以动态修改的数组。<br>继承了AbstractList并实现了List接口</p><ul><li>ArrayList的基本使用</li><li>总结：创建-增删改-访问-迭代-排序<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.middlename.test;<br><br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        ArrayList&lt;String&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>        <span class="hljs-comment">//添加数据</span><br>        list1.add(<span class="hljs-string">&quot;info1&quot;</span>);<br>        list1.add(<span class="hljs-string">&quot;info2&quot;</span>);<br><br>        System.out.println(list1);<br>        <span class="hljs-comment">//访问元素  list1.get()</span><br>        System.out.println(list1.get(<span class="hljs-number">1</span>));   <span class="hljs-comment">//访问list1中第2个元素    内部索引从0开始</span><br>        <span class="hljs-comment">//修改元素 list1.set(index,element_data)</span><br>        list1.set(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;element 0 information&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;\n&quot;</span>+list1);<br>        <span class="hljs-comment">//删除元素  list1.remove(index)</span><br>        list1.remove(<span class="hljs-number">0</span>);<br>        System.out.println(<span class="hljs-string">&quot;\n&quot;</span>+list1);<br>        <span class="hljs-comment">//计算大小  list1.size()</span><br>        System.out.println(list1.size());<br><br>        <span class="hljs-comment">// !!! 迭代</span><br>        list1.add(<span class="hljs-string">&quot;info3&quot;</span>);list1.add(<span class="hljs-string">&quot;info4&quot;</span>);list1.add(<span class="hljs-string">&quot;info5&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;\n\n\n&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;list1.size();i++)&#123;<br>            System.out.println(list1.get(i));<br>        &#125;<br><br>        <span class="hljs-comment">// !!! 排序   Collections.sort(instance1)</span><br>        list1.add(<span class="hljs-string">&quot;a&quot;</span>);list1.add(<span class="hljs-string">&quot;b&quot;</span>);list1.add(<span class="hljs-string">&quot;c&quot;</span>);<br>        Collections.sort(list1);<span class="hljs-comment">//字母排序</span><br>        System.out.println(<span class="hljs-string">&quot;\n\n\n&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;list1.size();i++)&#123;<br>            System.out.println(list1.get(i));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>LinkedList是一种常见的数据结构，是一种线性表<br>与ArrayList相比，LinkedList的增加和删除的操作效率更高，而查找和修改的操作效率比较低。</p><p>LinkedList实现了Queue接口，可作为队列使用<br>LinkedList实现了List接口，可进行列表的相关操作<br>LinkedList实现了Deque接口，可作为队列使用<br>LinkedList实现了Cloneable接口，可实现克隆<br>LinkedList实现了Serializable接口，即可支持序列化，能通过序列化取传输</p><ul><li>LinkedList 基本使用</li><li>总结：创建-增删-访问-迭代-排序<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.middlename.test;<br><br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//创建    LinkedList&lt;Type&gt; instance1 = new LinkedList&lt;Type&gt;();</span><br>        LinkedList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Integer&gt;();<br><br>        <span class="hljs-comment">// 加 add(index)  addFirst()  addLast()</span><br>        list.add(<span class="hljs-number">1</span>);<br>        list.addFirst(<span class="hljs-number">0</span>);<br>        list.addLast(-<span class="hljs-number">1</span>);<br>        System.out.println(list+<span class="hljs-string">&quot;\n\n&quot;</span>);<br><br>        <span class="hljs-comment">// 移除 remove(index)  removeFirst()   removeLast()</span><br>        list.remove(<span class="hljs-number">1</span>);<br>        System.out.println(list);<br>        list.removeFirst();<br>        System.out.println(list);<br>        list.removeLast();<br>        System.out.println(list);<br><br>        <span class="hljs-comment">// 获取元素 get(index) getFirst()   getLast()</span><br>        list.add(<span class="hljs-number">1</span>);list.addFirst(<span class="hljs-number">0</span>);list.addLast(-<span class="hljs-number">1</span>);<br>        System.out.print(list.get(<span class="hljs-number">1</span>));<br>        System.out.print(list.getFirst());<br>        System.out.print(list.getLast());<br><br><br>        <span class="hljs-comment">// !!! 迭代   for+list.size()+get(index)</span><br>        System.out.println(<span class="hljs-string">&quot;\n\n&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> list.size(), i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            System.out.println(list.get(i));<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;\n\n&quot;</span>);<br>        <span class="hljs-comment">// for each遍历</span><br>        <span class="hljs-keyword">for</span> (Integer i : list) &#123;<br>            System.out.println(i);<br>        &#125;<br>        <br>        <span class="hljs-comment">// sort()</span><br>        Collections.sort(list);<br>        <span class="hljs-keyword">for</span> (Integer i : list) &#123;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="Java-HashSet"><a href="#Java-HashSet" class="headerlink" title="Java HashSet"></a>Java HashSet</h3><p>HashSet 基于HashMap实现，是一个不允许由重复元素的集合<br>HashSet允许由null值<br>HashSet是无需的，即不会记录插入的顺序<br>HashSet不是线程安全的，如果多个线程尝试同时修改HashSet结果是不确定的，必须在多线程访问时显式同步对HashSet的并发访问<br>HashSet实现了Set接口</p><ul><li>HashSet的基本使用</li><li>总结：创建-增删-迭代<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建HashSet    new HashSet&lt;Type&gt;</span><br>HashSet&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;String&gt;();<br><br><span class="hljs-comment">// 增    add(data)</span><br>set.add(<span class="hljs-string">&quot;info1&quot;</span>);<br>set.add(<span class="hljs-string">&quot;info2&quot;</span>);<br><br><span class="hljs-comment">// 判断元素存在否  set.contains(&quot;data&quot;)</span><br>System.out.println(set.contains(<span class="hljs-string">&quot;info1&quot;</span>));<br><br><span class="hljs-comment">// 删    remove()</span><br>System.out.println(set.remove(<span class="hljs-string">&quot;info1&quot;</span>));<br>System.out.println(set);<br><br><span class="hljs-comment">// 计算大小</span><br>System.out.println(set.size());<br><br><span class="hljs-comment">// for each 迭代</span><br><span class="hljs-keyword">for</span> (String i : set) &#123;<br>    System.out.println(i);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>HashMap是一个散列表，它存储的内是键值对<br>HahsMap实现了Map接口<br>HashMap是无序的，即不会记录插入的顺序</p><ul><li>HashMap基本使用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建HashMap&lt;Integer,String&gt;    new HashMap&lt;Integer,String&gt;</span><br>HashMap&lt;Integer,String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer,String&gt;();<br><br><span class="hljs-comment">// 增    put(key,value)</span><br>map.put(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;google&quot;</span>);<br>map.put(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;baidu&quot;</span>);<br>map.put(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;taobao&quot;</span>);<br>System.out.println(map);<br><br><span class="hljs-comment">// 访问元素     map.get(key)</span><br>System.out.println(map.get(<span class="hljs-number">2</span>));<br><br><span class="hljs-comment">// 删除元素     remove(key)</span><br>map.remove(<span class="hljs-number">1</span>);<br>System.out.println(map);<br><br><span class="hljs-comment">// 清空map.clear()</span><br><br><span class="hljs-comment">// !! 迭代 for each</span><br><span class="hljs-keyword">for</span> (Integer i : map.keySet()) &#123;<br>   System.out.println(<span class="hljs-string">&quot;key: &quot;</span> + i + <span class="hljs-string">&quot; value: &quot;</span> + map.get(i));<br>&#125;<br><span class="hljs-comment">// 返回所有 value 值</span><br><span class="hljs-keyword">for</span>(String value: map.values()) &#123;<br>   <span class="hljs-comment">// 输出每一个value</span><br>   System.out.print(value + <span class="hljs-string">&quot;, &quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="Java-Iterator迭代器"><a href="#Java-Iterator迭代器" class="headerlink" title="Java Iterator迭代器"></a>Java Iterator迭代器</h3><p>Java Iterator(迭代器)是一种用于访问集合的方法<br>迭代器it的两个基本操作是 next hasNext remove<br>调用 it.next()返回迭代器的下一个元素，并且更新迭代器的状态<br>调用it.hasNext()检测集合中是否还有元素<br>调用it.remove()将迭代器返回的元素删除</p><ul><li>iterator 迭代<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>list.add(<span class="hljs-number">1</span>);list.add(<span class="hljs-number">2</span>);list.add(<span class="hljs-number">3</span>);<br>list.add(<span class="hljs-number">4</span>);list.add(<span class="hljs-number">5</span>);list.add(<span class="hljs-number">6</span>);<br><br>Iterator&lt;Integer&gt; it = list.iterator();<br><span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> it.next();  <span class="hljs-comment">//迭代</span><br>    <span class="hljs-keyword">if</span>(i == <span class="hljs-number">2</span>)&#123;it.remove();&#125;<br>&#125;<br>System.out.println(list);<br></code></pre></td></tr></table></figure></li></ul><h3 id="Java泛型"><a href="#Java泛型" class="headerlink" title="Java泛型"></a>Java泛型</h3><p>泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数</p><ul><li>泛型方法<br>该方法在调用时考研接受不同的参数<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">E - Element (在集合中使用，因为集合中存放的是元素)<br>T - Type(java类)<br>K - Key(键)<br>V - Value(值)<br>N - Number(数值类型)<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 泛型方法 printArray</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt; E &gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">printArray</span><span class="hljs-params">( E[] inputArray )</span><br>&#123;<br>    <span class="hljs-comment">// 输出数组元素</span><br>    <span class="hljs-keyword">for</span> ( E element : inputArray )&#123;<br>        System.out.printf( <span class="hljs-string">&quot;%s &quot;</span>, element );<br>    &#125;<br>    System.out.println();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// 创建不同类型数组： Integer, Double 和 Character</span><br>    Integer[] intArray = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> &#125;;<br>    Double[] doubleArray = &#123; <span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">3.3</span>, <span class="hljs-number">4.4</span> &#125;;<br>    Character[] charArray = &#123; <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span> &#125;;<br><br>    System.out.println( <span class="hljs-string">&quot;整型数组元素为:&quot;</span> );<br>    printArray( intArray  ); <span class="hljs-comment">// 传递一个整型数组</span><br><br>    System.out.println( <span class="hljs-string">&quot;\n双精度型数组元素为:&quot;</span> );<br>    printArray( doubleArray ); <span class="hljs-comment">// 传递一个双精度型数组</span><br><br>    System.out.println( <span class="hljs-string">&quot;\n字符型数组元素为:&quot;</span> );<br>    printArray( charArray ); <span class="hljs-comment">// 传递一个字符型数组</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Java-网络编程"><a href="#Java-网络编程" class="headerlink" title="Java 网络编程"></a>Java 网络编程</h3><h3 id="记得补充"><a href="#记得补充" class="headerlink" title="!!!!!!!记得补充"></a>!!!!!!!记得补充</h3><h3 id="多线程编程"><a href="#多线程编程" class="headerlink" title="多线程编程"></a>多线程编程</h3><p>一条线程指的是进程中一个单一顺序的控制流；一个进程可以并发多个线程，每条线程并发执行不同的任务。</p><p><img src="/img/java/1.3.png" alt="java并发"></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">新建状态 new关键字和Thread类<br>就绪状态 线程对象调用了<span class="hljs-built_in">start</span>()方法<br>运行状态 如果就绪状态的线程获取CPU资源，就可以执行<span class="hljs-built_in">run</span>()<br>阻塞状态 线程执行了sleep（睡眠）、suspend（挂起）等方法<br>死亡状态 一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。<br></code></pre></td></tr></table></figure><ul><li><p>线程的优先级<br>Java 线程的优先级是一个整数，其取值范围是 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ）。<br>默认情况下，每一个线程都会分配一个优先级 NORM_PRIORITY（5）。</p></li><li><p>创建线程<br>Java 提供了三种创建线程的方法：</p></li></ul><p>通过实现 Runnable 接口；<br>通过继承 Thread 类本身；<br>通过 Callable 和 Future 创建线程。</p><ul><li>通过继承Thread来创建线程</li><li>总结：线程类extends Thread；编写构造方法和run方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.middlename.test;<br><br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> Thread t;<br>    <span class="hljs-keyword">private</span> String threadName;<br><br>    ThreadDemo( String name) &#123;<br>        threadName = name;<br>        System.out.println(<span class="hljs-string">&quot;Creating &quot;</span> +  threadName );<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Running &quot;</span> +  threadName );<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>                System.out.println(<span class="hljs-string">&quot;Thread: &quot;</span> + threadName + <span class="hljs-string">&quot;, &quot;</span> + i);<br>                <span class="hljs-comment">// 让线程睡眠一会</span><br>                Thread.sleep(<span class="hljs-number">50</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Thread &quot;</span> +  threadName + <span class="hljs-string">&quot; interrupted.&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;Thread &quot;</span> +  threadName + <span class="hljs-string">&quot; exiting.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span> <span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Starting &quot;</span> +  threadName );<br>        <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span>) &#123;<br>            t = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span> (<span class="hljs-built_in">this</span>, threadName);<br>            t.start ();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test1</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">ThreadDemo</span> <span class="hljs-variable">T1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadDemo</span>( <span class="hljs-string">&quot;Thread-1&quot;</span>);<br>        T1.start();<br><br>        <span class="hljs-type">ThreadDemo</span> <span class="hljs-variable">T2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadDemo</span>( <span class="hljs-string">&quot;Thread-2&quot;</span>);<br>        T2.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="Java-MySQL连接"><a href="#Java-MySQL连接" class="headerlink" title="Java MySQL连接"></a>Java MySQL连接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.middlename.test;<br> <br><span class="hljs-keyword">import</span> java.sql.*;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySQLDemo</span> &#123;<br> <br>    <span class="hljs-comment">// MySQL 8.0 以下版本 - JDBC 驱动名及数据库 URL</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">JDBC_DRIVER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>;  <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DB_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/testgo&quot;</span>;<br> <br>    <span class="hljs-comment">// MySQL 8.0 以上版本 - JDBC 驱动名及数据库 URL</span><br>    <span class="hljs-comment">//static final String JDBC_DRIVER = &quot;com.mysql.cj.jdbc.Driver&quot;;  </span><br>    <span class="hljs-comment">//static final String DB_URL = &quot;jdbc:mysql://localhost:3306/RUNOOB?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=UTC&quot;;</span><br> <br> <br>    <span class="hljs-comment">// 数据库的用户名与密码，需要根据自己的设置</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">USER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PASS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">// 注册 JDBC 驱动</span><br>            Class.forName(JDBC_DRIVER);<br>        <br>            <span class="hljs-comment">// 打开链接</span><br>            System.out.println(<span class="hljs-string">&quot;连接数据库...&quot;</span>);<br>            conn = DriverManager.getConnection(DB_URL,USER,PASS);<br>        <br>            <span class="hljs-comment">// 执行查询</span><br>            System.out.println(<span class="hljs-string">&quot; 实例化Statement对象...&quot;</span>);<br>            stmt = conn.createStatement();<br>            String sql;<br>            sql = <span class="hljs-string">&quot;SELECT id, name, url FROM websites&quot;</span>;<br>            <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> stmt.executeQuery(sql);<br>        <br>            <span class="hljs-comment">// 展开结果集数据库</span><br>            <span class="hljs-keyword">while</span>(rs.next())&#123;<br>                <span class="hljs-comment">// 通过字段检索</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">id</span>  <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;url&quot;</span>);<br>    <br>                <span class="hljs-comment">// 输出数据</span><br>                System.out.print(<span class="hljs-string">&quot;ID: &quot;</span> + id);<br>                System.out.print(<span class="hljs-string">&quot;, 站点名称: &quot;</span> + name);<br>                System.out.print(<span class="hljs-string">&quot;, 站点 URL: &quot;</span> + url);<br>                System.out.print(<span class="hljs-string">&quot;\n&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">// 完成后关闭</span><br>            rs.close();<br>            stmt.close();<br>            conn.close();<br>        &#125;<span class="hljs-keyword">catch</span>(SQLException se)&#123;<br>            <span class="hljs-comment">// 处理 JDBC 错误</span><br>            se.printStackTrace();<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            <span class="hljs-comment">// 处理 Class.forName 错误</span><br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            <span class="hljs-comment">// 关闭资源</span><br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-keyword">if</span>(stmt!=<span class="hljs-literal">null</span>) stmt.close();<br>            &#125;<span class="hljs-keyword">catch</span>(SQLException se2)&#123;<br>            &#125;<span class="hljs-comment">// 什么都不做</span><br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-keyword">if</span>(conn!=<span class="hljs-literal">null</span>) conn.close();<br>            &#125;<span class="hljs-keyword">catch</span>(SQLException se)&#123;<br>                se.printStackTrace();<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;Goodbye!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="尚硅谷"><a href="#尚硅谷" class="headerlink" title="尚硅谷"></a>尚硅谷</h2><ul><li><p>三元运算符</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino">   (条件表达式)?表达式<span class="hljs-number">1</span>:表达式<span class="hljs-number">2</span>;<br><span class="hljs-comment">// 三元运算符的基本使用</span><br>   <span class="hljs-type">int</span> max = (m&gt;n)?m:n;<br><span class="hljs-comment">// 三元运算符的嵌套</span><br>   <span class="hljs-type">String</span> maxStr = (m&gt;n)?<span class="hljs-string">&quot;m大&quot;</span>:((m==n)?<span class="hljs-string">&quot;m = n&quot;</span>:<span class="hljs-string">&quot;n大&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>数组</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux基本命令</title>
    <link href="/2022/06/03/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/06/03/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2022/06/03/test/"/>
    <url>/2022/06/03/test/</url>
    
    <content type="html"><![CDATA[<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br></code></pre></td></tr></table></figure><div class="note note-success">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><p><img src="/img/example.gif"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>git笔记</title>
    <link href="/2022/06/03/git%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/06/03/git%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="0综述与安装"><a href="#0综述与安装" class="headerlink" title="0综述与安装"></a>0综述与安装</h1><a class="btn" href="https://juejin.cn/post/6844903877138087950%"  target="_blank">掘金git笔记</a><ul><li>安装: 一路next</li></ul><h1 id="git的常用命令"><a href="#git的常用命令" class="headerlink" title="git的常用命令"></a>git的常用命令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs git">git config --global user.name 用户名<br>git config --global user.email 邮箱<br><br><br><br>git init        初始化本地库<br><br>git status      查看本地库状态<br><br>git add 文件名  添加到暂存区<br><br>git commit -m &quot;注释信息&quot; 文件名     提交到本地库<br><br>git reflog      产看历史记录<br><br>git reset --hard 版本号<br></code></pre></td></tr></table></figure><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>在git bash</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk">git init<br><br><span class="hljs-regexp">//</span>创建新的文件<br>vim a.txt       <br>i<br><span class="hljs-regexp">//</span>输入文件内容<br>something <br><span class="hljs-regexp">//</span> esc + :wq<br><br><span class="hljs-regexp">//</span>查看git status状态<br>git status<br><br><span class="hljs-regexp">//</span> 添加暂存区<br>git add a.txt<br><br>git status<br><br><span class="hljs-regexp">//</span> 提交到本地仓库<br>git commit -m <span class="hljs-string">&quot;fist commit note &quot;</span><br><br><span class="hljs-regexp">//</span> 查看历史版本记录 reference logs<br>git reflog<br><br>git log<br></code></pre></td></tr></table></figure><h2 id="历史版本"><a href="#历史版本" class="headerlink" title="历史版本"></a>历史版本</h2><ul><li>查看历史版本信息和版本回溯<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">git reflog      // 查看版本信息<br>git log         // 查看版本详细信息<br></code></pre></td></tr></table></figure></li></ul><p>版本回溯demo</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-comment">// 修改两次文件 并提交</span><br>vim a.txt<br>i<br>========================version2================<br><span class="hljs-section">bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb</span><br><span class="hljs-section">==============================================</span><br>:wq<br><br>git add a.txt<br>git commit -m &quot;second commit &quot;<br><br>vim a.txt<br>i<br>===============version3===================<br><span class="hljs-section">cccccccccccccccccccccccccccccccccccccccccc</span><br><span class="hljs-section">==========================================</span><br>:wq<br>git add a.txt<br>git cmommit -m &quot;third commit&quot;<br><br><span class="hljs-comment">// 查看版本信息     并根据版本信息回溯</span><br>git reflog<br>git reset --hard 1975cf9        //--hard + 版本号<br>git reflog<br>cat a.txt       //查看文件信息<br></code></pre></td></tr></table></figure><h2 id="git分支"><a href="#git分支" class="headerlink" title="git分支"></a>git分支</h2><ul><li><p>分支操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs git">git branch 分支名           //创建分支<br>git branch -v             //查看分支<br>git checkout 分支名         //切换分支<br>git merge 分支名            // 把指定的分支合并到当前分支 <br></code></pre></td></tr></table></figure></li><li><p>创建分支，修改，合并</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs git">git branch hot-fix      //创建git分支<br>git checkout hot-fix    // 切换到hot-fix分支<br><br>// 对于当前的代码进行hot-fix<br>vim a.txt<br>i<br>===hot-fix===<br>hhhhhhhh<br>=============<br>esc :wq<br><br>// 切换到主分支 将修改的代码文件合并到主分支<br>git checkout master<br>git branch -v <br>git merge hot-fix<br>git add * <br>git commit -m &quot;test merge operation&quot;<br></code></pre></td></tr></table></figure></li><li><p>合并冲突：同一个文件的同一个位置有两套完全不同的修改</p></li><li><p>报错后通过手动合并解决这个问题</p></li></ul><h1 id="Git团队协作机制"><a href="#Git团队协作机制" class="headerlink" title="Git团队协作机制"></a>Git团队协作机制</h1><h2 id="创建别名"><a href="#创建别名" class="headerlink" title="创建别名"></a>创建别名</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">git remote -v   // 查看别名<br>git remote add ori git@github.com:lujie3/testgit.git    // git remote add 别名 仓库地址<br></code></pre></td></tr></table></figure><p>0 github创建仓库<br>1 本地仓库到远程仓库的提交</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> init <br><span class="hljs-symbol">touch</span> readme.txt<br><span class="hljs-symbol">git</span> <span class="hljs-keyword">add</span> readme.txt<br><span class="hljs-symbol">git</span> commit -m <span class="hljs-string">&quot;first commit &quot;</span><br><br><span class="hljs-symbol">git</span> remote -v<br><span class="hljs-symbol">git</span> remote <span class="hljs-keyword">add</span> nickname1 仓库地址<br><span class="hljs-symbol">git</span> remote -v<br><br><span class="hljs-symbol">git</span> <span class="hljs-keyword">push</span> nickname1 master   <span class="hljs-comment">// git push 仓库别名 仓库分支名</span><br></code></pre></td></tr></table></figure><h2 id="拉取远程库到本地库"><a href="#拉取远程库到本地库" class="headerlink" title="拉取远程库到本地库"></a>拉取远程库到本地库</h2><p>更新最新的远程库版本到本地仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git pull nickname1 master   // git pull 仓库别名 仓库分支名<br></code></pre></td></tr></table></figure><h2 id="clone仓库"><a href="#clone仓库" class="headerlink" title="clone仓库"></a>clone仓库</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">仓库地址</span><br></code></pre></td></tr></table></figure><p>git clone == git clone + git init + git remote nickname 仓库地址</p><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><p>github仓库setting&gt;Manage access 添加成员到团队中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs git">//成员1提交修改<br>git add modify.txt<br>git commit modify.txt -m &quot;commit notes&quot;<br>git remote push nickname master<br><br>// 成员2同步拉取最新版本<br>git pull nickname master<br>cat modify.txt      //查看修改结果<br></code></pre></td></tr></table></figure><h2 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h2><p>1 fork项目<br>2 Pull requests</p><h2 id="SSH免密登录"><a href="#SSH免密登录" class="headerlink" title="SSH免密登录"></a>SSH免密登录</h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C 邮箱<br></code></pre></td></tr></table></figure><p>生成的公钥添加到账户的ssh中</p><h1 id="idea-集成-git"><a href="#idea-集成-git" class="headerlink" title="idea 集成 git"></a>idea 集成 git</h1><h2 id="创建忽略文件"><a href="#创建忽略文件" class="headerlink" title="创建忽略文件"></a>创建忽略文件</h2><p>1 创建忽略规则文件      customed_name.ignore 比如git.ignore<br>2 在.gitconfig文件中引用忽略配置文件<br>3 idea&gt; setting中&gt; git</p><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>1 初始化 添加 提交<br>2 切换版本<br>3 创建分支</p><p class="note note-primary">标签</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs subunit">primary<br><br>secondary<br><br><span class="hljs-keyword">success</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword"></span>danger<br><br>warning<br><br>info<br><br>light<br></code></pre></td></tr></table></figure><div class="note note-success">            <p>文字 或者 <code>markdown</code> 均可</p>          </div>![](/img/example.gif)]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/03/hello-world/"/>
    <url>/2022/06/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
